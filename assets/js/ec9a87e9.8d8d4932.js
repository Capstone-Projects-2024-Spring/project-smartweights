"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[424],{77987:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(85893),s=n(11151);const i={sidebar_position:9},r="Database Diagrams",o={id:"system-architecture/database-diagrams",title:"Database Diagrams",description:"SmartWeights uses a relation schema approach to the database design. It combines usage of both cloud based database (CloudKit) and local storage database (CoreData).",source:"@site/docs/system-architecture/database-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/database-diagrams",permalink:"/project-smartweights/docs/system-architecture/database-diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-smartweights/edit/main/documentation/docs/system-architecture/database-diagrams.md",tags:[],version:"current",lastUpdatedBy:"Jonathan Stanczak",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"docsSidebar",previous:{title:"Circuit Diagram",permalink:"/project-smartweights/docs/system-architecture/circuit-diagram"},next:{title:"API Specification",permalink:"/project-smartweights/docs/category/api-specification"}},d={},c=[{value:"CloudKit Database Design",id:"cloudkit-database-design",level:2},{value:"CloudKit Database Design, Shop",id:"cloudkit-database-design-shop",level:2},{value:"CoreData Database Design",id:"coredata-database-design",level:2}];function l(e){const t={em:"em",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"database-diagrams",children:"Database Diagrams"}),"\n",(0,a.jsx)(t.p,{children:"SmartWeights uses a relation schema approach to the database design. It combines usage of both cloud based database (CloudKit) and local storage database (CoreData)."}),"\n",(0,a.jsx)(t.h2,{id:"cloudkit-database-design",children:"CloudKit Database Design"}),"\n",(0,a.jsx)(t.p,{children:"CloudKit uses a relational database schema where every record has a relation to an iCloud user record that is created by CloudKit."}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.strong,{children:(0,a.jsx)(t.em,{children:"User"})})," entity is meant to store the id that is generated by CloudKit and other relevant data. This is used as the parent for other entities.\nCloudKit offers two databases:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Public","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Records that are accessible to all users of the application"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["Private","\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Records that are only accessible to the specific iCloud user"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"The portions of the public database are all of the asset related entities. The public database's data is never manipulated by users, only read. These entities being:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Achievement"}),"\n",(0,a.jsx)(t.li,{children:"PetImage"}),"\n",(0,a.jsx)(t.li,{children:"PetClothing"}),"\n",(0,a.jsx)(t.li,{children:"Food"}),"\n",(0,a.jsx)(t.li,{children:"Background"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:'The user is able to manipulate data in their "private cloud database." These specific entities being:'}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Pet"}),"\n",(0,a.jsx)(t.li,{children:"Inventory"}),"\n",(0,a.jsx)(t.li,{children:"FitnessData"}),"\n",(0,a.jsx)(t.li,{children:"FitnessPlan"}),"\n",(0,a.jsx)(t.li,{children:"Achievement"}),"\n"]}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: NoSQL ERD (Cloud base, User)\n---\nerDiagram\n\n    %% User ||--||Achievement_List: has\n   \n    User ||--||Fitness_data: contains\n    User ||--||Inventory: has\n    User ||--||Pet: has\n    Pet ||--|| PetImage: has\n    Inventory ||--|{ PetImage: has\n    Inventory ||--o{ PetClothing: has\n \n    Inventory ||--o{ Food: has\n    Inventory ||--o{ Background: has\n    Fitness_data||--||fitness_plan: has\n\n   User ||--o{User_Achievements:has\n    Achievement ||--|{ User_Achievements: has\n\n\n    Fitness_data{\n        int age\n        int height\n        int weight\n\n    }\n\n    fitness_plan{\n\n        int weight_goal\n        int num_days_to_workout\n    }\n    User {\n        string first_name\n        string last_name\n        int currency\n        date latest_login\n\n    }\n    Pet{\n        int level\n        int health\n        int total_xp\n    }\n    PetImage{\n        int price\n        string petName\n        string PetImage_url\n    }\n    Inventory{\n        List Background\n        List Food\n        List PetClothing\n        List Pets\n        Reference activeBackground\n        Reference activePetClothing\n\n    }\n    Food{\n        int price\n        string food_name\n        string food_image_url\n    }\n    Background{\n        int price\n        string background_name\n        string background_image_url\n    }\n    PetClothing{\n        int price\n        string Name\n        string Pet_Clothing_image\n    }\n   Achievement{\n        int Achievement\n        string achievement_name\n        int total_progress\n        string reward\n    }\n    User_Achievements{\n\n         bool is_completed\n        int progress_percentage\n\n    }\n"}),"\n",(0,a.jsx)(t.p,{children:"The activeBackground and activePetClothing attributes act as references directly to their specific assets. The lists in inventory is an array of references to their specific assets. This is so an inventory can contain multiple of references, such as an inventory containing more than one type of background asset."}),"\n",(0,a.jsx)(t.h2,{id:"cloudkit-database-design-shop",children:"CloudKit Database Design, Shop"}),"\n",(0,a.jsx)(t.p,{children:"The application's shop page retrieves the images from the database, stores, and displays them. The user does not manipulate this relevant data. It is used for the application to retrieve assets needed for the shop and to make loading assets with relevant values easier for development."}),"\n",(0,a.jsx)(t.h2,{id:"coredata-database-design",children:"CoreData Database Design"}),"\n",(0,a.jsx)(t.p,{children:"The purpose of the CoreData database design is to be lightweight and to contain the information that will be received from the multiple sensors attached to the user and dumbbells. This will help provide relevant feedback for the user's workout once the data has been processed through an algorithm. There will also be a history with each feedback to allow users to revisit and see their past feedback."}),"\n",(0,a.jsx)(t.p,{children:"There will be a form with as many workouts depending on how many sets the user is doing. The form will take all the data from several Workouts and process it through an algorithm to detect whether or not the user had good or bad form through a scoring system ( 1 to 100, 1 being worst to 100 being perfect). There will also be feedback correlated with the score and will consist of suggestions on how to fix up their form."}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: CoreData Structure\n---\n\nerDiagram\n    Workout {\n        workout_id INT\n        user_id INT\n        speed FLOAT\n        velocity FLOAT\n        angle FLOAT\n        dateTime DATETIME\n        xCoord FLOAT\n        yCoord FLOAT\n        zCoord FLOAT\n    }\n    Form {\n        form_id INT\n        score INT\n        feedback STRING\n        dateTime DATETIME\n    }\n\n    Workout }|--|| Form : has\n\n\n"})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>r});var a=n(67294);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);