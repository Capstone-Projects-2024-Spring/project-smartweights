"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1270],{64225:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>o,frontMatter:()=>r,metadata:()=>d,toc:()=>h});var i=s(85893),l=s(11151);const r={sidebar_position:1},t="Unit tests",d={id:"testing/unit-testing",title:"Unit tests",description:"Swift unit tests are done with Swift's XCTest",source:"@site/docs/testing/unit-testing.md",sourceDirName:"testing",slug:"/testing/unit-testing",permalink:"/project-smartweights/docs/testing/unit-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-smartweights/edit/main/documentation/docs/testing/unit-testing.md",tags:[],version:"current",lastUpdatedBy:"Daniel Eap",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Test Procedures",permalink:"/project-smartweights/docs/category/test-procedures"},next:{title:"Integration tests",permalink:"/project-smartweights/docs/testing/integration-testing"}},c={},h=[{value:"Front End",id:"front-end",level:2},{value:"Pet Page",id:"pet-page",level:3},{value:"WorkoutViewModel",id:"workoutviewmodel",level:3},{value:"Pet Store Page",id:"pet-store-page",level:3},{value:"FormCriteria",id:"formcriteria",level:3},{value:"Database Integration",id:"database-integration",level:2},{value:"CloudKit DB Tests",id:"cloudkit-db-tests",level:3},{value:"CloudKitManager Tests",id:"cloudkitmanager-tests",level:4},{value:"BackgroundItemDBManager Tests",id:"backgrounditemdbmanager-tests",level:4},{value:"UserDBManager Tests",id:"userdbmanager-tests",level:4},{value:"FoodItemDBManager Tests",id:"fooditemdbmanager-tests",level:4},{value:"PetItemDBManager Tests",id:"petitemdbmanager-tests",level:4},{value:"PetDBManager Tests",id:"petdbmanager-tests",level:4},{value:"FitnessPlanDBManager Tests",id:"fitnessplandbmanager-tests",level:4},{value:"CoreData Local DB",id:"coredata-local-db",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"unit-tests",children:"Unit tests"}),"\n",(0,i.jsx)(n.p,{children:"Swift unit tests are done with Swift's XCTest"}),"\n",(0,i.jsx)(n.p,{children:"Pico-W testing is done with pytest library"}),"\n",(0,i.jsx)(n.h2,{id:"front-end",children:"Front End"}),"\n",(0,i.jsx)(n.h3,{id:"pet-page",children:"Pet Page"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" HandleFoodUse() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Health increases after eating food"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test user is feeding their pets food","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User clicks on food button to feed pet"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"handleFoodUse(selectedFoodIndex: Int) is called, health bar should increase"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Food quantity decreases after eating food"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test user is feeding their pets food","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User clicks on food button to feed pet"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"handleFoodUse(selectedFoodIndex: Int) is called, food quantity should decrease"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Health should not exceed after eating food"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test user is feeding their pet with the pet's health bar full","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User clicks on food button to feed pet"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"handleFoodUse(selectedFoodIndex: Int) is called, health bar bar should not exceed full"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Alert users of insufficient amount of food"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test user is feeding their pets with insufficient amount of food","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User clicks on food button to feed pet"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"handleFoodUse(selectedFoodIndex: Int) is called, an alert pops up telling the user they have no more food"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Alert users that health is at max"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test user is feeding their pets the health already full","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User clicks on food button to feed pet"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"handleFoodUse(selectedFoodIndex: Int) is called, an alert pops up telling the user that the health bar is already full"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"workoutviewmodel",children:"WorkoutViewModel"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testIsInputZeroOrInvalid()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Validates whether input values are zero or invalid"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User inputs values for sets, reps, weights, and countdown","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User enters input values"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The function correctly identifies whether the input values are zero or invalid."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testIsValidInput()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Validates the validity of input values"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User inputs values for sets, reps, weights, and countdown","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User enters input values"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The function correctly identifies whether the input values are valid."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testStringToInt()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Validates the conversion of string to integer"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User inputs a string value","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User enters a string value"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The function correctly converts the string to an integer if possible; otherwise, returns nil."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testResetWorkoutState()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Validates the reset of workout state"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User resets the workout state","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User initiates a new workout"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The workout state variables are reset to their initial values."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testStartWorkout()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Validates the start of workout"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User starts a workout session","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User initiates the start of a workout session"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The workout state is updated to indicate that the workout has started."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testNextSet()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Validates the transition to the next set"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User progresses to the next set during a workout session","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User initiates the transition to the next set"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The workout state and relevant variables are updated accordingly for the next set."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testResetTimer()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Validates the reset of timer"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User resets the timer during a workout session","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User initiates a new workout"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The timer variables are reset, and the timer is deactivated."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"pet-store-page",children:"Pet Store Page"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testSortItemsByPrice()"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test sorting items by price","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Call ",(0,i.jsx)(n.code,{children:"sortItems"})," with ",(0,i.jsx)(n.code,{children:"sortByPrice: true"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Items should be sorted by price in ascending order"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testSortItemsbyName()"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test sorting items by name","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Call ",(0,i.jsx)(n.code,{children:"sortItems"})," with ",(0,i.jsx)(n.code,{children:"sortByPrice: false"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Items should be sorted by name in alphabetical order"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testSubtractFunds()"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test subtracting funds","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Subtract funds using ",(0,i.jsx)(n.code,{children:"subtractFunds(price: 100)"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"viewModel.userCur"})," should decrease by ",(0,i.jsx)(n.code,{children:"100"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testPurchaseItem()"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test purchasing an item","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Purchase an item using ",(0,i.jsx)(n.code,{children:"purchaseItem(item: item)"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The item should be marked as bought"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"viewModel.userCur"})," should decrease by the item's price"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testAddFunds()"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test adding funds to user currency","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add funds using ",(0,i.jsx)(n.code,{children:"addFundtoUser(price: 100)"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"viewModel.userCur"})," should increase by ",(0,i.jsx)(n.code,{children:"100"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"formcriteria",children:"FormCriteria"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" getRandomGoodFormPhrase()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"The user gets one of three phrases when having good form"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User finishes a workout and wants their feedback","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User clicks 'finish set' or 'finish workout'"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"getRandomGoodFormPhrase() is called and the user sees one of the three phrases"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" updateWorkoutAnalysis()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"updates the workout analysis data with provided current data"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User completes a workout session and wants to see the results","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User finishes a workout session"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The workout analysis is updated with the provided data and contains the expected keys."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" averageUpDownAcceleration()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Calculate of average up-down acceleration"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User wants to ensure accurate calculation of up-down acceleration average","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User performs several sets of exercises"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The calculated average up-down acceleration falls within the range of 0 to 1."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" averageWristLeftRightRotation()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Calculates average wrist left-right rotation"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User wants to ensure accurate calculation of left-right wrist rotation average","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User performs several sets of exercises"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The calculated average wrist left-right rotation falls within the range of 0 to 1."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" overallWorkoutUpDownAverage()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"calculates overall workout up-down average"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User wants to ensure accurate calculation of overall workout up-down average","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User completes a workout session"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The calculated overall workout up-down average falls within the range of 0 to 1 and is approximately equal to the expected value."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" averageElbowSwing()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"calculates average elbow swing"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User wants to ensure accurate calculation of elbow swing average","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User performs several sets of exercises"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The calculated average elbow swing falls within the range of 0 to 1."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" averageElbowFlareForwardBackward()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"calculates average elbow flare forward-backward"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User wants to ensure accurate calculation of elbow flare forward-backward average","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User performs several sets of exercises"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The calculated average elbow flare forward-backward falls within the range of 0 to 1."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" overallWorkoutElbowSwing()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"calculates overall workout elbow swing"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User wants to ensure accurate calculation of overall workout elbow swing","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User completes a workout session"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The calculated overall workout elbow swing falls within the range of 0 to 1 and is approximately equal to the expected value."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" dangerousForm()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Detects of dangerous form"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User wants to ensure accurate detection of dangerous form based on provided data","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User performs exercises with varying data"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The function correctly identifies whether the provided data indicates dangerous form."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" giveFeedback()"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"generation of feedback"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["User wants to ensure accurate generation of feedback based on provided data","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User completes an exercise session"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The feedback generated for acceleration and elbow swing is formatted correctly, and the custom text feedback for elbow is correct."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"database-integration",children:"Database Integration"}),"\n",(0,i.jsx)(n.h3,{id:"cloudkit-db-tests",children:"CloudKit DB Tests"}),"\n",(0,i.jsx)(n.h4,{id:"cloudkitmanager-tests",children:"CloudKitManager Tests"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Unit Tests for the CloudKitManager class"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testCreateUser()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the creation of a new user in the database."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userExists"})," should be ",(0,i.jsx)(n.code,{children:"true"})," after creating a user successfully."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchUser()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of user data from the database."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The fetched user data (",(0,i.jsx)(n.code,{children:"user"}),") should not be ",(0,i.jsx)(n.code,{children:"nil"}),", and there should be no ",(0,i.jsx)(n.code,{children:"error"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testGetCurrency()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the retrieval of the currency value associated with the user."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The retrieved currency value (",(0,i.jsx)(n.code,{children:"currency"}),") should not be ",(0,i.jsx)(n.code,{children:"nil"}),", and there should be no ",(0,i.jsx)(n.code,{children:"error"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testUpdateCurrency()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the updating of the currency value associated with the user."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There should be no ",(0,i.jsx)(n.code,{children:"error"})," after updating the currency value."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testGetName()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the retrieval of the full name of the user."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The retrieved name (",(0,i.jsx)(n.code,{children:"name"}),") should not be ",(0,i.jsx)(n.code,{children:"nil"}),", and there should be no ",(0,i.jsx)(n.code,{children:"error"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testUpdateName()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the updating of the first name and/or last name of the user."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There should be no ",(0,i.jsx)(n.code,{children:"error"})," after updating the name."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h4,{id:"backgrounditemdbmanager-tests",children:"BackgroundItemDBManager Tests"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Unit Tests for the BackgroundItemDBManager class"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchBackgroundItems()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of background items from the database."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while fetching background items."}),"\n",(0,i.jsx)(n.li,{children:"Background items should not be nil."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchSpecificBackgroundItem()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of a specific background item from the database."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while fetching the specific background item."}),"\n",(0,i.jsx)(n.li,{children:"The fetched background item should not be nil."}),"\n",(0,i.jsx)(n.li,{children:"The image name of the fetched background item should match the provided image name."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testCreateBackgroundItem()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the creation of a new background item in the database."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while creating the background item."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testSetUnactiveAllBackgroundItems()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the deactivation of all background items in the database."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while deactivating all background items."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testGetActiveBackground()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the retrieval of the active background item."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The active background item should be an empty string, indicating no active background."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h4,{id:"userdbmanager-tests",children:"UserDBManager Tests"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Unit Tests for the UserDBManager class"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testCreateUser()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the creation of a new user in the database."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userExists"})," should be ",(0,i.jsx)(n.code,{children:"true"})," after creating a user successfully."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchUser()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of user data from the database."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The fetched user data (",(0,i.jsx)(n.code,{children:"user"}),") should not be ",(0,i.jsx)(n.code,{children:"nil"}),", and there should be no ",(0,i.jsx)(n.code,{children:"error"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testGetCurrency()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the retrieval of the currency value associated with the user."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The retrieved currency value (",(0,i.jsx)(n.code,{children:"currency"}),") should not be ",(0,i.jsx)(n.code,{children:"nil"}),", and there should be no ",(0,i.jsx)(n.code,{children:"error"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testUpdateCurrency()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the updating of the currency value associated with the user."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There should be no ",(0,i.jsx)(n.code,{children:"error"})," after updating the currency value."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testGetName()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the retrieval of the full name of the user."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The retrieved name (",(0,i.jsx)(n.code,{children:"name"}),") should not be ",(0,i.jsx)(n.code,{children:"nil"}),", and there should be no ",(0,i.jsx)(n.code,{children:"error"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testUpdateName()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the updating of the first name and/or last name of the user."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There should be no ",(0,i.jsx)(n.code,{children:"error"})," after updating the name."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h4,{id:"fooditemdbmanager-tests",children:"FoodItemDBManager Tests"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Unit Tests for the FoodItemDBManager class"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchFoodItems()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of food items."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while fetching food items."}),"\n",(0,i.jsx)(n.li,{children:"The fetched food items should not be nil."}),"\n",(0,i.jsx)(n.li,{children:"The number of fetched food items should match the expected count."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testCreateFoodItem()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the creation of a food item."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while creating the food item."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testUpdateQuantity()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the update of a food item's quantity."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while updating the quantity."}),"\n",(0,i.jsx)(n.li,{children:"The updated food item should be found in the food items list."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchQuantity()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of a food item's quantity."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while fetching the quantity."}),"\n",(0,i.jsx)(n.li,{children:"The fetched quantity should not be nil."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testUpdateQuantity_add()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the addition of quantity to a food item."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while updating the quantity."}),"\n",(0,i.jsx)(n.li,{children:"The updated food item should be found in the food items list."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h4,{id:"petitemdbmanager-tests",children:"PetItemDBManager Tests"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Unit Tests for the PetItemDBManager class"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchPetItems()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of pet items."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while fetching pet items."}),"\n",(0,i.jsx)(n.li,{children:"The fetched pet items should not be nil."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchSpecificPetItem()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of a specific pet item."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while fetching the specific pet item."}),"\n",(0,i.jsx)(n.li,{children:"The fetched pet item should not be nil."}),"\n",(0,i.jsx)(n.li,{children:"The fetched pet item should match the expected image name."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testCreatePetItem()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the creation of a pet item."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while creating the pet item."}),"\n",(0,i.jsx)(n.li,{children:"The created pet item should be found in the pet items list."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testSetActivePetItem()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the setting of an active pet item."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while setting the active pet item."}),"\n",(0,i.jsx)(n.li,{children:"The active pet item should match the expected image name."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testGetActivePet()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the retrieval of the active pet."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while retrieving the active pet."}),"\n",(0,i.jsx)(n.li,{children:"The retrieved active pet should match the expected image name."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h4,{id:"petdbmanager-tests",children:"PetDBManager Tests"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Unit Tests for the PetDBManager class"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testCreatePet()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the creation of a pet."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The pet should exist after creation."}),"\n",(0,i.jsx)(n.li,{children:"The initial existence status of the pet should not match the existence status after creation."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testFetchPet()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the fetching of a pet."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while fetching the pet."}),"\n",(0,i.jsx)(n.li,{children:"The fetched pet should not be nil."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testGetXP()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the retrieval of XP."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while retrieving XP."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testGetLevel()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the retrieval of the level."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while retrieving the level."}),"\n",(0,i.jsx)(n.li,{children:"The retrieved level should not be nil."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testUpdateUserXP()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the updating of user XP."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while updating user XP."}),"\n",(0,i.jsx)(n.li,{children:"The total XP should match the new XP value."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"testUpdateUserLevel()"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the updating of user level."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"There should be no error while updating user level."}),"\n",(0,i.jsx)(n.li,{children:"The level should match the new level value."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h4,{id:"fitnessplandbmanager-tests",children:"FitnessPlanDBManager Tests"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Unit Tests for the FitnessPlanDBManager class"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["testCreateFitnessPlan()","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests the creation of a fitness plan."}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The fitness plan should not be nil after creation."}),"\n",(0,i.jsx)(n.li,{children:"The days per week goal of the created fitness plan should match the provided value."}),"\n",(0,i.jsx)(n.li,{children:"The dumbbell weight goal of the created fitness plan should match the provided value."}),"\n",(0,i.jsx)(n.li,{children:"The set goal of the created fitness plan should match the provided value."}),"\n",(0,i.jsx)(n.li,{children:"The rep goal of the created fitness plan should match the provided value."}),"\n",(0,i.jsx)(n.li,{children:"The notes of the created fitness plan should match the provided value."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"coredata-local-db",children:"CoreData Local DB"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" setUpWithError() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Sets up an in-memory Core Data environment for each test"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensures tests do not affect real user data by creating a mock environment","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/Setup action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Core Data stack setup with in-memory store type"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CoreDataManager instance is initialized without errors"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" tearDownWithError() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Cleans up and deallocates the in-memory Core Data stack after each test"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensures all data and instances are cleaned up properly","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/Cleanup action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Removing persistent stores from the coordinator"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Persistent stores are removed without errors, and CoreDataManager is deallocated"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testCreateWorkoutSession() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests the ability to create a WorkoutSession entity"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Validating entity creation within the Core Data environment","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a WorkoutSession with specified attributes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"WorkoutSession entity is not nil and correctly initialized with provided values"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testCreateAndFetchWorkoutSessions() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests integration of creating and fetching WorkoutSession entities"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensures data consistency within the created and fetched entities","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a WorkoutSession and then fetch it"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The fetched WorkoutSessions list should not be empty and contain the created session"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testFetchWorkoutSessions() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests fetching WorkoutSession entities"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Validates the fetch functionality of the Core Data manager","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create and then fetch WorkoutSession entities"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The fetch returns a list containing the newly created sessions"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testFetchWorkoutSessionsOnDate() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests fetching WorkoutSession entities based on a specific date"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensures that sessions on a given date are correctly retrieved","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a WorkoutSession for today and fetch by today's date"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The fetch returns a list containing only today's sessions"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testGetNextWorkoutNumber() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests retrieving the next workout number"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensures correct incrementation of workout numbers","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a WorkoutSession and then retrieve the next workout number"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The next workout number should be greater than the number of the last session created"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testFetchExerciseSets() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests fetching ExerciseSet entities associated with a WorkoutSession"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Validates the fetch functionality for ExerciseSets tied to specific sessions","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a WorkoutSession and an associated ExerciseSet, then fetch the sets"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The fetched exercise sets list should contain the created set"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testUpdateWorkoutSession() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests updating a WorkoutSession entity"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Verifies that changes to an entity are persisted correctly","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Update an existing WorkoutSession's attributes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The updated WorkoutSession should reflect the new attribute values"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testUpdateExerciseSet() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests updating an ExerciseSet entity"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensures property changes are saved correctly within the entity","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Update an existing ExerciseSet's attributes"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The updated ExerciseSet should reflect the new attribute values"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testFetchAllExerciseSets() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests fetching all ExerciseSet entities"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Validates that multiple sets are returned when expected","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create multiple ExerciseSets and fetch all"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The fetched exercise sets list should include all created sets"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:" testFetchExerciseSetsForWorkoutNum() "}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Tests fetching ExerciseSet entities by workout number"})})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Ensures they are correctly retrieved based on the workout number","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input/User action","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create an ExerciseSet for a specific workout number and then fetch by that number"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Expected Result","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The fetched exercise sets list should contain the sets for the specific workout number"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})]})}function o(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>t});var i=s(67294);const l={},r=i.createContext(l);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);