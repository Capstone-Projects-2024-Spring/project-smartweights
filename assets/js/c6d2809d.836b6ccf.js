"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2257],{26442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(85893),s=t(11151);const r={sidebar_position:7},o="Class Diagram",i={id:"system-architecture/class-diagram",title:"Class Diagram",description:"SmartWeights uses an MVVM architecture and the class diagrams reflect as such.",source:"@site/docs/system-architecture/class-diagram.md",sourceDirName:"system-architecture",slug:"/system-architecture/class-diagram",permalink:"/project-smartweights/docs/system-architecture/class-diagram",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-smartweights/edit/main/documentation/docs/system-architecture/class-diagram.md",tags:[],version:"current",lastUpdatedBy:"Tu",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docsSidebar",previous:{title:"Design Mockup",permalink:"/project-smartweights/docs/system-architecture/design-mockup"},next:{title:"Circuit Diagram",permalink:"/project-smartweights/docs/system-architecture/circuit-diagram"}},l={},c=[{value:"Architecture",id:"architecture",level:2},{value:"Features of the SmartWeights App",id:"features-of-the-smartweights-app",level:2},{value:"App",id:"app",level:3},{value:"Login",id:"login",level:3},{value:"Virtual Pet",id:"virtual-pet",level:3},{value:"Challenges",id:"challenges",level:3},{value:"Pet Store",id:"pet-store",level:3},{value:"Profile",id:"profile",level:3},{value:"Settings",id:"settings",level:3},{value:"HomePage",id:"homepage",level:3},{value:"Workout",id:"workout",level:3},{value:"External Logic",id:"external-logic",level:2},{value:"DB Management",id:"db-management",level:3},{value:"Example Implementation",id:"example-implementation",level:4},{value:"Bluetooth Low Energy Connector",id:"bluetooth-low-energy-connector",level:3},{value:"Example Implementation",id:"example-implementation-1",level:4},{value:"Raspberry Pi Pico W",id:"raspberry-pi-pico-w",level:3}];function h(e){const n={h1:"h1",h2:"h2",h3:"h3",h4:"h4",mermaid:"mermaid",p:"p",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"class-diagram",children:"Class Diagram"}),"\n",(0,a.jsx)(n.p,{children:"SmartWeights uses an MVVM architecture and the class diagrams reflect as such."}),"\n",(0,a.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsx)(n.p,{children:"The SmartWeights application is made with SwiftUI and the visual elements are made through its views. The elements within the views vary, but all are relevant to some graphical component. Some contain buttons, images, or components that we are creating that are not part of the SwiftUI library such as the WorkoutGraph or Calendar. The methods in the views represent any sort of user interaction with the view. The method itself calls to its respective ViewModel to handle the functionality. ViewModels handle logic such as changing which view to redirect to, or update the current view with new data relevant to their reliant variables. The models are the classes that hold the data elements these views rely on."}),"\n",(0,a.jsx)(n.p,{children:"Additionally, there are classes to connect to external systems being CloudKit and the Raspberry Pi Pico. These classes establish the connection between the application and system and allow the transfer of data between the two. These classes are used in the relevant views where it would be needed. For example: The virtual pet page would require the CloudKit related classes, and the workout page would require the Raspberry Pi related classes."}),"\n",(0,a.jsx)(n.h2,{id:"features-of-the-smartweights-app",children:"Features of the SmartWeights App"}),"\n",(0,a.jsx)(n.p,{children:"The following class diagrams show the main sections that the user can interact with in the app and the logic that comes with it."}),"\n",(0,a.jsx)(n.h3,{id:"app",children:"App"}),"\n",(0,a.jsx)(n.p,{children:"The SmartWeightsApp class acts as the entry point for the application. Pages in the app contain a NavBar component."}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n class SmartWeightsApp{\n    + ContentView()\n   }\n   class NavBar{\n        HomeButton\n        Achievementbutton\n        PetButton\n        MiscButton\n        navButtonPressed(button)\n   \n   }\n   SmartWeightsApp o-- NavBar"}),"\n",(0,a.jsx)(n.h3,{id:"login",children:"Login"}),"\n",(0,a.jsx)(n.p,{children:'The login page consists of a big image of a pet and the login button. The user would click on the login button which would then ask them to "Continue with Apple". This is done through Apple\'s OAuth services with Apple Login.'}),"\n",(0,a.jsx)(n.mermaid,{value:"\nclassDiagram \n\n    class LoginPage{\n        logoImage\n        loginButton\n        loginButtonPressed()\n    }\n\n    class LoginPageVM{\n        login()\n    }\n    class LoginPageM{\n        LoginStatus: boolean\n    }\n    LoginPage o-- LoginPageVM\n    LoginPageVM <-- LoginPageM\n"}),"\n",(0,a.jsx)(n.h3,{id:"virtual-pet",children:"Virtual Pet"}),"\n",(0,a.jsx)(n.p,{children:"The pet page consists of an image of the pet, their stats (hp, exp, lvl) and whatever they have equipped (accessories or clothes). There are some interactive features for the user that involve the pet such as changing their appearance, feeding their pets, and buying things for their pets. There is an inventory button, shop button, and a customize button within a hamburger menu."}),"\n",(0,a.jsx)(n.mermaid,{value:"\n\n\nclassDiagram\n class VirtualPet{\n    backgroundImage\n    PetImage\n    PetAccessory\n    PetHealthBar\n    PetLevelBar\n    HamburgerMenuButton\n    InventoryButton\n    CustomizeButton\n    ShopButton\n\n    HamburgerButtonPressed()\n    InventoryButtonPressed()\n    CustomizeButtonPressed()\n    ShopButtonPressed()\n   }\n   class VirtualPetVM{\n        UpdatePet()\n        InventoryShow()\n        CustomizeShow()\n        RedirectToShop()\n    }\n    class VirtualPetM{\n        PetHealth : int\n        PetLevel : int \n        Inventory : List [Item]\n    }\n    VirtualPet o-- VirtualPetVM\n    VirtualPetVM <-- VirtualPetM\n    "}),"\n",(0,a.jsx)(n.h3,{id:"challenges",children:"Challenges"}),"\n",(0,a.jsx)(n.p,{children:"The challenges page consists of a list of several achievements that can be unlocked through the user by various tasks completed. Once any challenge/achievement is completed, the user can then reap their rewards through a click of a button. The users could also view their own progress of certain challenges as well to see how much closer they are to completing it."}),"\n",(0,a.jsx)(n.mermaid,{value:"\nclassDiagram\n class ChallengesList{\n    challenges\n    TabPicker\n    ChallengesList\n    tabPickerClicked()\n    updateChallengesList()\n   }\n   class ChallengesTab{\n    body:ChallengesList\n   }\n   class ChallengeRow{\n    challenge: challenge\n    ChallengeImage: Image\n    ChallengeTitle: Text\n    ChallengeDescription: Text\n    ChallengeProgressText: Text\n    ChallengeReward: Text\n    ProgressBar: ProgressView\n   }\n\n     class ChallengesVM{\n        fetchChallenges()\n        onChallengesFetched()\n        onError()\n    }\n    class ChallengesM{\n        title: String\n        description: String\n        img: Image\n        currentProgress: Int\n        progressGoal: Int\n        reward: String\n        status: Bool\n        progressPercent: Double\n    }\n    ChallengesList o-- ChallengesVM\n    ChallengesVM <-- ChallengesM\n\n    ChallengesList *-- ChallengeRow\n    ChallengesList *-- ChallengesTab\n"}),"\n",(0,a.jsx)(n.h3,{id:"pet-store",children:"Pet Store"}),"\n",(0,a.jsx)(n.p,{children:"The pet store page consists of a bunch of items that can be bought with the user's hard-earned pet coins. With the pet coins, they can be achieved through rewards via challenges or completing workouts. Some of the items that can be bought within the pet store are things like food to restore hp for your pet, buy clothes/accessories to swag out your pet, new pets, and backgrounds."}),"\n",(0,a.jsx)(n.mermaid,{value:'\nclassDiagram\n\n class PetStore{\n    ArrowButton\n    MoneyImage\n    SortButton\n    TabButtons\n    ItemButtons\n    PurchaseButton\n    %% CancelButton\n    + sort()\n    + tabPressed()\n    + itemPressed()\n    + previewItem()\n    + purchasePressed()\n    + backArrowPressed()\n   }\n     class PetStoreVM{\n        purchase()\n    }\n    class PetStoreM{\n        currency: int\n        userPet: Pet\n        pets: Array[Pet]\n        backgrounds: Array[Background]\n        accessories: Array[Accessories]\n        food: Array[Food]   \n    }\n\n    class Item{\n        name: String\n        description: String\n        price: int\n        itemType: int\n        imageName: String\n    }\n    class Pet{\n\n    }\n    class Background{\n\n    }\n    class Accessory{\n\n    }\n    class Food{\n\n    }\n    PetStore o-- PetStoreVM\n    PetStoreVM <-- PetStoreM\n    PetStoreM "1" o-- "*" Item\n    Item <|-- Pet\n    Item <|-- Background\n    Item <|-- Accessory\n    Item <|-- Food\n'}),"\n",(0,a.jsx)(n.h3,{id:"profile",children:"Profile"}),"\n",(0,a.jsx)(n.p,{children:"The profile page consists of the user's profile pic, name, level, pet, and their achievements. The user can edit the showcase of their achievements, change their name, height, weight, and share their profile. Sharing their profile would create a new image that has the user's hard-earned accolades on display to show  their friends."}),"\n",(0,a.jsx)(n.mermaid,{value:"\nclassDiagram\n class Profile {\n    profPic\n    achPic1\n    achPic2\n    achPic3\n    fullName\n    level\n    levelProgressBar\n    editNameButton\n    settingsButton\n    ssButton\n    pet\n    +editNameButtonPressed()\n    +ssButtonPressed()\n    +achievementsButtonPressed()\n    +settingsButtonPressed()\n   }\n     class ProfileVM{\n        changeAchievments()\n        editName()\n        editHeight()\n        editWeight()\n        shareProfile()\n    }\n    class ProfileM{\n        displayName: String\n        lvl: int\n        height: int\n        weight: int\n        pet: virtualPet\n        challenges: Challenges\n\n    }\n    Profile o-- ProfileVM\n    ProfileVM <-- ProfileM"}),"\n",(0,a.jsx)(n.h3,{id:"settings",children:"Settings"}),"\n",(0,a.jsx)(n.p,{children:"The settings page allows users to customize their notifications"}),"\n",(0,a.jsx)(n.mermaid,{value:"\nclassDiagram\n class Settings{\n    notificationSlider\n   \n   }\n class SettingsVM{\n        toggleNotifications()\n   \n    }\n    class SettingsM{\n        notificationsAllowed: boolean\n      \n    }\n    Settings o--SettingsVM\nSettingsVM <--SettingsM"}),"\n",(0,a.jsx)(n.h3,{id:"homepage",children:"HomePage"}),"\n",(0,a.jsx)(n.p,{children:"The home page is where the user will usually go to or see first after they login successfully. There will be a video carousel of workout forms, there will be a tab to allow navigation through the app."}),"\n",(0,a.jsx)(n.mermaid,{value:"\nclassDiagram\nclass HomePage{\n    welcomeHeader: String\n    startWorkoutButton\n    buttonCarousel\n    videoCarousel\n    +startWorkoutButtonPressed()\n   }\n   class HomePageButtonCarousel{\n    button1\n    button2\n    button3\n\n    +button1Pressed()\n    +button2Pressed()\n    +button3Pressed()\n   }\n    class HomePageVideoCarousel{\n        header\n        video1\n        video2\n        video3\n        +video1Pressed()\n        +video2Pressed()\n        +video3Pressed()\n\n   }\n class HomePageVideoCarouselVM{\n        getVideo()\n    }\n    class HomePageVideoCarouselM{\n        video : string\n    }\n    \n    class HomePageVideoCarouselVMDBConnector{\n        dbConnect()\n        FetchData()\n        PostData()\n        DeleteData()\n    }\n\n    HomePageVideoCarouselVM <-- HomePageVideoCarouselM\n    HomePageVideoCarouselVM <-- HomePageVideoCarouselVMDBConnector\n\n    HomePage *-- HomePageButtonCarousel\n    HomePage *-- HomePageVideoCarousel"}),"\n",(0,a.jsx)(n.h3,{id:"workout",children:"Workout"}),"\n",(0,a.jsx)(n.p,{children:"The workout page is where the user goes when they want to start working out or review their past feedback history. The user selects their workout and enters how many sets and reps they'll be doing in their desired workout. Once the user is ready to initiate their workout, they can either use a button or voice activation/recognition to start. While they are working out, after each set is completed the feedback will processed through an algorithm to detect whether their form is good or bad and the pet will give suggestions on how to fix their form. The data is received through sensors and raspberry pi's during the workout. There will also be graphs and past feedback histories that the user can access if they want to. The user should also be able to see the video carousel to have more insight on what correct form could look like."}),"\n",(0,a.jsx)(n.mermaid,{value:"\nclassDiagram\n\n  class WorkoutPage{\n        header: String\n        audioInputButton\n        screenSelector\n        screenDisplay\n\n        +screenSelectorSelected()\n        +audioInputButtonPressed()\n\n    }\n    class WorkoutPageScreenSelector{\n        setsButton\n        formButton\n        +setsButtonPressed()\n        +formButtonPressed()\n    }\n    class WorkoutPageSetsDisplay{\n        weightInput\n        setsInput\n        setTracker\n        graph\n        insightDisplay\n        +readWeightInput()\n        +readSetsInput()\n    }\n    class WorkoutPageFormDisplay{\n        virtualPetDisplay\n        insightDisplay\n        videoCarousel\n    }\n    \n    class WorkoutPageSetTracker{\n        header\n        setTrackerDisplay\n    }\n    class WorkoutPageInsightDisplay{\n        header\n        insight\n        +readWeightInput()\n        +readSetsInput()\n    }\n    class WorkoutPageVideoCarousel{\n        header\n        video1\n        video2\n        video3\n        +video1Pressed()\n        +video2Pressed()\n        +video3Pressed()\n\n    }\n     \n    class WorkoutProgress{\n        BackButton\n        WorkoutSummaryHeader\n        BackgroundColor\n        Date\n        PetImage\n        form\n        formMore\n        velocity\n        velocityMore\n        achievementsEarned\n        CurrencyEarned\n        GraphHeader\n        GraphOptions\n        Graph\n        OverallForm\n        overallSpeed\n        formMorePressed()\n        velocityMorePressed()\n        ChangeGraphPressed()\n\n    }\n    class Calendar {\n        Title\n        Date \n\n    }\n    class WorkoutGraph{\n        Chart\n    }\n   class WorkoutVM{\n        StartPI()\n        StartSiri()\n        PostData()\n    }\n    class WorkoutM{\n\n    }\n      class WorkoutGraphVM{\n        getFormData()\n        getSpeedData()\n    }\n    class WorkoutGraphM{\n        \n    }\n    class WorkoutData{\n        Speed : int\n        Form : int\n    }\n\n    WorkoutPage o--WorkoutVM\n    WorkoutVM <-- WorkoutM\n    WorkoutGraph o-- WorkoutGraphVM\n    WorkoutGraphVM <-- WorkoutGraphM\n    WorkoutGraphM o-- WorkoutData\n    WorkoutGraphVM .. ProgressVM\n    WorkoutPage *-- WorkoutPageScreenSelector\n    WorkoutPageScreenSelector *-- WorkoutPageSetsDisplay\n    WorkoutPageScreenSelector *-- WorkoutPageFormDisplay\n    WorkoutPageSetsDisplay *-- WorkoutPageSetTracker\n    WorkoutPageSetsDisplay *-- WorkoutPageInsightDisplay\n    WorkoutPageFormDisplay *-- WorkoutPageInsightDisplay\n    WorkoutPageFormDisplay *-- WorkoutPageVideoCarousel\n    WorkoutProgress *-- WorkoutGraph\n    WorkoutProgress *-- Calendar\n    WorkoutPage o-- WorkoutProgress\n"}),"\n",(0,a.jsx)(n.h2,{id:"external-logic",children:"External Logic"}),"\n",(0,a.jsx)(n.p,{children:"The external logic contains the classes that connect to external systems being CloudKit and the Raspberry Pi Pico W."}),"\n",(0,a.jsx)(n.h3,{id:"db-management",children:"DB Management"}),"\n",(0,a.jsx)(n.p,{children:"The CloudKitManager class serves as the central manager for interacting with CloudKit. It provides methods for saving, fetching, and deleting records from the CloudKit databases. The other classes represent more specific uses for the DB and help facilitate the necessary parameters for the CloudKitManager to perform its operations."}),"\n",(0,a.jsx)(n.mermaid,{value:"\nclassDiagram\n    class CloudKitManager{\n        + shared\n        + container\n        + publicDatabase\n        + privateDatabase\n        isSignedInToiCloud: Bool\n        saveRecord()\n        fetchRecord()\n        deleteRecord()\n    }\n    class UserDB{\n        createUser()\n    }\n    class InventoryDB{\n        createInventory()\n        fetchCurrency()\n        updateCurrency()\n    }\n    class PetDB{\n        fetchHealth()\n        fetchLevel()\n        updateHealth()\n        updateLevel()\n    }\n    class AchievementDB{\n        fetchAchievements()\n        updateAchievements()\n    }\n\n    CloudKitManager o-- UserDB\n    CloudKitManager o-- InventoryDB\n    CloudKitManager o-- PetDB\n    CloudKitManager o-- AchievementDB"}),"\n",(0,a.jsx)(n.h4,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,a.jsx)(n.p,{children:"The Login view model will use the UserDB class in order to create a user with a successful login. The Virtual Pet view model will use the PetDB class to fetch the pet's health."}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n    class LoginVM{\n\n    }\n    class UserDB{\n\n    }\n    LoginVM o-- UserDB\n\n    class VirtualPetVM{\n\n    }\n    class PetDB{\n        \n    }\n\n    VirtualPetVM o-- PetDB"}),"\n",(0,a.jsx)(n.h3,{id:"bluetooth-low-energy-connector",children:"Bluetooth Low Energy Connector"}),"\n",(0,a.jsx)(n.p,{children:"This represents the class that is in the application that is used to connect to the Raspberry Pi Pico W. It establishes connections with multiple sensors and determines the central and peripheral systems. It contains an integer array of the data that is being received from the Picos."}),"\n",(0,a.jsx)(n.mermaid,{value:"\nclassDiagram\n    class BLEManager {\n        - UUID\n        - accelerations: [Int]\n        centralManager()\n        peripheral()\n    }"}),"\n",(0,a.jsx)(n.h4,{id:"example-implementation-1",children:"Example Implementation"}),"\n",(0,a.jsx)(n.p,{children:"The Workout View Model requires the BLEManager class in order to get the data and use it."}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n    class WorkoutVM{\n\n    }\n    class BLEManager{\n\n    }\n\n    WorkoutVM o-- BLEManager"}),"\n",(0,a.jsx)(n.h3,{id:"raspberry-pi-pico-w",children:"Raspberry Pi Pico W"}),"\n",(0,a.jsx)(n.p,{children:"The Raspberry Pi Pico W has its own classes in order to function. The Pico W runs on a continuous loop, which is represented as main. The classes represent the logic and data for the sensors that are attached to the Pico for reading and writing data in order for the Pico to send to the application via Bluetooth Low Energy (BLE)\nIDK Which class is being used"}),"\n",(0,a.jsx)(n.mermaid,{value:"classDiagram\n\n   \n    class BLEAdvertisingPayload {\n        +advertising_payload(limited_disc: bool, br_edr: bool, name: str, services: List[UUID], appearance: int): bytearray\n        +decode_field(payload: bytearray, adv_type: int): List[bytearray]\n        +decode_name(payload: bytearray): str\n        +decode_services(payload: bytearray): List[UUID]\n    }\n    class MPU6050 {\n        -address: int\n        -i2c: machine.I2C\n        +__init__(i2c: machine.I2C, address: int = 0x68): void\n        +wake(): void\n        +sl\n        eep(): void\n        +who_am_i(): int\n        +read_temperature(): float\n        +read_gyro_range(): int\n        +write_gyro_range(range: int): void\n        +read_gyro_data(): tuple[float, float, float]\n        +read_accel_range(): int\n        +write_accel_range(range: int): void\n        +read_accel_data(): tuple[float, float, float]\n        +read_lpf_range(): int\n        +write_lpf_range(range: int): void\n        +_translate_pair(high: int, low: int): int\n        +_hex_to_index(range: int): int\n        +_index_to_hex(index: int): int\n    }\n    class mpuData {\n        -id: str\n        -mpu: MPU6050\n        +__init__(id: str): void\n        +get_accel_data(): tuple\n        +get_gyro_data(): tuple\n        +hello(): void\n    }\n    class BLEAcceleration {\n        -_mpu6050: mpuData\n        -_ble: bluetooth.BLE\n        -_handle_ax: int\n        -_handle_ay: int\n        -_handle_az: int\n        -_handle_gx: int\n        -_handle_gy: int\n        -_handle_gz: int\n        -_connections: set\n        -_payload: bytearray\n        +__init__(ble: bluetooth.BLE, id: str): void\n        +_irq(event: int, data: Any): void\n        +update_acceleration(notify: bool, indicate: bool): void\n        +_advertise(interval_us: int): void\n    }\n    class main{\n\n    }\n    main <-- BLEAcceleration\n    main <-- mpuData\n    main <-- MPU6050\n    main <-- BLEAdvertisingPayload"})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var a=t(67294);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);