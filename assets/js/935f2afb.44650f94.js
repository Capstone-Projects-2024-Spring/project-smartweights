"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Introduction","href":"/project-smartweights/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Requirements Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"System Overview","href":"/project-smartweights/docs/requirements/system-overview","docId":"requirements/system-overview","unlisted":false},{"type":"link","label":"System Block Diagram","href":"/project-smartweights/docs/requirements/system-block-diagram","docId":"requirements/system-block-diagram","unlisted":false},{"type":"link","label":"General Requirements","href":"/project-smartweights/docs/requirements/general-requirements","docId":"requirements/general-requirements","unlisted":false},{"type":"link","label":"Features and Requirements","href":"/project-smartweights/docs/requirements/features-and-requirements","docId":"requirements/features-and-requirements","unlisted":false},{"type":"link","label":"Use-case descriptions","href":"/project-smartweights/docs/requirements/use-case-descriptions","docId":"requirements/use-case-descriptions","unlisted":false}],"href":"/project-smartweights/docs/category/requirements-specification"},{"type":"category","label":"System Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Sequence Diagrams","href":"/project-smartweights/docs/system-architecture/sequence-diagrams","docId":"system-architecture/sequence-diagrams","unlisted":false},{"type":"link","label":"Development Environment","href":"/project-smartweights/docs/system-architecture/development-environment","docId":"system-architecture/development-environment","unlisted":false},{"type":"link","label":"Version Control","href":"/project-smartweights/docs/system-architecture/version-control","docId":"system-architecture/version-control","unlisted":false},{"type":"link","label":"Design Mockup","href":"/project-smartweights/docs/system-architecture/design-mockup","docId":"system-architecture/design-mockup","unlisted":false},{"type":"link","label":"Class Diagram","href":"/project-smartweights/docs/system-architecture/class-diagram","docId":"system-architecture/class-diagram","unlisted":false},{"type":"link","label":"Circuit Diagram","href":"/project-smartweights/docs/system-architecture/circuit-diagram","docId":"system-architecture/circuit-diagram","unlisted":false},{"type":"link","label":"Database Diagrams","href":"/project-smartweights/docs/system-architecture/database-diagrams","docId":"system-architecture/database-diagrams","unlisted":false},{"type":"link","label":"User Form Table","href":"/project-smartweights/docs/system-architecture/user-form","docId":"system-architecture/user-form","unlisted":false}],"href":"/project-smartweights/docs/category/system-architecture"},{"type":"category","label":"API Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Design API","href":"/project-smartweights/docs/api-specification/api_doc","docId":"api-specification/api_doc","unlisted":false},{"type":"link","label":"Database Integration","href":"/project-smartweights/docs/api-specification/database-integration","docId":"api-specification/database-integration","unlisted":false}],"href":"/project-smartweights/docs/category/api-specification"},{"type":"category","label":"Test Procedures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Unit tests","href":"/project-smartweights/docs/testing/unit-testing","docId":"testing/unit-testing","unlisted":false},{"type":"link","label":"Integration tests","href":"/project-smartweights/docs/testing/integration-testing","docId":"testing/integration-testing","unlisted":false},{"type":"link","label":"Acceptance test","href":"/project-smartweights/docs/testing/acceptence-testing","docId":"testing/acceptence-testing","unlisted":false}],"href":"/project-smartweights/docs/category/test-procedures"}]},"docs":{"api-specification/api_doc":{"id":"api-specification/api_doc","title":"Design API","description":"Class: MPU6050","sidebar":"docsSidebar"},"api-specification/database-integration":{"id":"api-specification/database-integration","title":"Database Integration","description":"Class: CloudKitManager","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Introduction","description":"SmartWeights is a project that presents a comprehensive approach to fitness and virtual pets. The project aims to improve both physical and mental health by helping users fix their form, as well as rewarding them for their hard work.","sidebar":"docsSidebar"},"requirements/features-and-requirements":{"id":"requirements/features-and-requirements","title":"Features and Requirements","description":"Functional Requirements","sidebar":"docsSidebar"},"requirements/general-requirements":{"id":"requirements/general-requirements","title":"General Requirements","description":"- iPhone with iOS 17","sidebar":"docsSidebar"},"requirements/system-block-diagram":{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"System Block Diagram","sidebar":"docsSidebar"},"requirements/system-overview":{"id":"requirements/system-overview","title":"System Overview","description":"Project Abstract","sidebar":"docsSidebar"},"requirements/use-case-descriptions":{"id":"requirements/use-case-descriptions","title":"Use-case descriptions","description":"Use Case 1 - Account Login","sidebar":"docsSidebar"},"system-architecture/circuit-diagram":{"id":"system-architecture/circuit-diagram","title":"Circuit Diagram","description":"Parts Included","sidebar":"docsSidebar"},"system-architecture/class-diagram":{"id":"system-architecture/class-diagram","title":"Class Diagram","description":"SmartWeights uses an MVVM architecture and the class diagrams reflect as such.","sidebar":"docsSidebar"},"system-architecture/database-diagrams":{"id":"system-architecture/database-diagrams","title":"Database Diagrams","description":"SmartWeights uses a relation schema approach to the database design. It combines usage of both cloud based database (CloudKit) and local storage database (CoreData).","sidebar":"docsSidebar"},"system-architecture/design-mockup":{"id":"system-architecture/design-mockup","title":"Design Mockup","description":"Some images are provided by Figma and only serve as a placeholder. Any information in the images do not represent the actual data. .","sidebar":"docsSidebar"},"system-architecture/development-environment":{"id":"system-architecture/development-environment","title":"Development Environment","description":"Documentation","sidebar":"docsSidebar"},"system-architecture/sequence-diagrams":{"id":"system-architecture/sequence-diagrams","title":"Sequence Diagrams","description":"Use Case 1 - Account Login","sidebar":"docsSidebar"},"system-architecture/user-form":{"id":"system-architecture/user-form","title":"User Form Table","description":"The two tables below are used to create a threshold of what is considered good form. The numbers represent the acceleration in degrees per second. The MPU6050 sensor is responsible for these providing gyroscopical data.","sidebar":"docsSidebar"},"system-architecture/version-control":{"id":"system-architecture/version-control","title":"Version Control","description":"This project will be managed using Git and GitHub. The main branch is protected and requires an approved pull request to merge. Each feature of the project is under its own branch and created from its respective Jira ticket.","sidebar":"docsSidebar"},"testing/acceptence-testing":{"id":"testing/acceptence-testing","title":"Acceptance test","description":"Exhibit all functional and non-functional requirements by employing a blend of automated tests derived from user stories, complemented by manual tests incorporating user interactions with the app. Additionally, encompass tests focusing on both the functional and technical aspects of the application, with recorded observations detailing the outcomes.","sidebar":"docsSidebar"},"testing/integration-testing":{"id":"testing/integration-testing","title":"Integration tests","description":"Tests to demonstrate each use-case based on the use-case descriptions and the sequence diagrams. External input should be provided via mock objects and results verified via mock objects. Integration tests should not require manual entry of data nor require manual interpretation of results.","sidebar":"docsSidebar"},"testing/unit-testing":{"id":"testing/unit-testing","title":"Unit tests","description":"Swift unit tests are done with Swift\'s XCTest","sidebar":"docsSidebar"}}}')}}]);