"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2257],{26442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(85893),s=t(11151);const o={sidebar_position:7},r="Class Diagram",i={id:"system-architecture/class-diagram",title:"Class Diagram",description:"SmartWeights uses an MVVM architecture and the class diagrams reflect as such. The frontend represents the views and the backend represents the viewmodels and models. The following is separated in this manner. Every view has its own respective viewmodel.",source:"@site/docs/system-architecture/class-diagram.md",sourceDirName:"system-architecture",slug:"/system-architecture/class-diagram",permalink:"/project-smartweights/docs/system-architecture/class-diagram",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-smartweights/edit/main/documentation/docs/system-architecture/class-diagram.md",tags:[],version:"current",lastUpdatedBy:"Adam Ra",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docsSidebar",previous:{title:"Design Mockup",permalink:"/project-smartweights/docs/system-architecture/design-mockup"},next:{title:"Circuit Diagram",permalink:"/project-smartweights/docs/system-architecture/circuit-diagram"}},l={},c=[{value:"Front End",id:"front-end",level:2},{value:"Backend",id:"backend",level:2}];function d(e){const n={h1:"h1",h2:"h2",mermaid:"mermaid",p:"p",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"class-diagram",children:"Class Diagram"}),"\n",(0,a.jsx)(n.p,{children:"SmartWeights uses an MVVM architecture and the class diagrams reflect as such. The frontend represents the views and the backend represents the viewmodels and models. The following is separated in this manner. Every view has its own respective viewmodel."}),"\n",(0,a.jsx)(n.h2,{id:"front-end",children:"Front End"}),"\n",(0,a.jsx)(n.p,{children:"Our frontend is made with SwiftUI and the visual elements are made through its views. Views come from SwiftUI's View struct. The entry point into the application is through the SmartWeightsApp class. The elements within the views vary, but all are relevant to some graphical component. Some contain buttons, images, or components that we are creating that are not part of the SwiftUI library such as the WorkoutGraph or Calendar. The methods in the views represent any sort of user interaction with the view. The method itself calls to its respective ViewModel to handle the functionality. Many views are made up of the NavBar component and it allows users to view other key components. The NavBar is necessary in creating a simple but effective way for users to traverse the application."}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: FrontEnd\n---\n\n\nclassDiagram \n   class SmartWeightsApp{\n    + ContentView()\n   }\n   class NavBar{\n        HomeButton\n        Achievementbutton\n        PetButton\n        MiscButton\n        navButtonPressed(button)\n   \n   }\n   class LoginPage{\n    logoImage\n    loginButton\n    loginButtonPressed()\n   }\n   \n   class VirtualPet{\n    backgroundImage\n    PetImage\n    PetAccessory\n    PetHealthBar\n    PetLevelBar\n    HamburgerMenuButton\n    InventoryButton\n    CustomizeButton\n    ShopButton\n\n    HamburgerButtonPressed()\n    InventoryButtonPressed()\n    CustomizeButtonPressed()\n    ShopButtonPressed()\n   }\n   class ChallengesList{\n    challenges\n    TabPicker\n    ChallengesList\n    tabPickerClicked()\n    updateChallengesList()\n   }\n   class ChallengesTab{\n    body:ChallengesList\n   }\n   class ChallengeRow{\n    challenge: challenge\n    ChallengeImage: Image\n    ChallengeTitle: Text\n    ChallengeDescription: Text\n    ChallengeProgressText: Text\n    ChallengeReward: Text\n    ProgressBar: ProgressView\n   }\n   class PetStore{\n    ArrowButton\n    MoneyImage\n    SortButton\n    TabButtons\n    ItemButtons\n    PurchaseButton\n    %% CancelButton\n    + sort()\n    + tabPressed()\n    + itemPressed()\n    + previewItem()\n    + purchasePressed()\n    + backArrowPressed()\n   }\n   class Profile {\n    profPic\n    achPic1\n    achPic2\n    achPic3\n    fullName\n    level\n    levelProgressBar\n    editNameButton\n    settingsButton\n    ssButton\n    pet\n    +editNameButtonPressed()\n    +ssButtonPressed()\n    +achievementsButtonPressed()\n    +settingsButtonPressed()\n   }\n   class Settings{\n    notificationSlider\n    connectHealthKitButton\n   }\n   class HomePage{\n    welcomeHeader: String\n    startWorkoutButton\n    buttonCarousel\n    videoCarousel\n    +startWorkoutButtonPressed()\n   }\n   class HomePageButtonCarousel{\n    button1\n    button2\n    button3\n\n    +button1Pressed()\n    +button2Pressed()\n    +button3Pressed()\n   }\n    class HomePageVideoCarousel{\n        header\n        video1\n        video2\n        video3\n        +video1Pressed()\n        +video2Pressed()\n        +video3Pressed()\n\n   }\n    class WorkoutPage{\n        header: String\n        audioInputButton\n        screenSelector\n        screenDisplay\n\n        +screenSelectorSelected()\n        +audioInputButtonPressed()\n\n    }\n    class WorkoutPageScreenSelector{\n        setsButton\n        formButton\n        +setsButtonPressed()\n        +formButtonPressed()\n    }\n    class WorkoutPageSetsDisplay{\n        weightInput\n        setsInput\n        setTracker\n        graph\n        insightDisplay\n        +readWeightInput()\n        +readSetsInput()\n    }\n    class WorkoutPageFormDisplay{\n        virtualPetDisplay\n        insightDisplay\n        videoCarousel\n    }\n    \n    class WorkoutPageSetTracker{\n        header\n        setTrackerDisplay\n    }\n    class WorkoutPageInsightDisplay{\n        header\n        insight\n        +readWeightInput()\n        +readSetsInput()\n    }\n    class WorkoutPageVideoCarousel{\n        header\n        video1\n        video2\n        video3\n        +video1Pressed()\n        +video2Pressed()\n        +video3Pressed()\n\n    }\n     \n    class WorkoutProgress{\n        BackButton\n        WorkoutSummaryHeader\n        BackgroundColor\n        Date\n        PetImage\n        form\n        formMore\n        velocity\n        velocityMore\n        achievementsEarned\n        CurrencyEarned\n        GraphHeader\n        GraphOptions\n        Graph\n        OverallForm\n        overallSpeed\n        formMorePressed()\n        velocityMorePressed()\n        ChangeGraphPressed()\n\n    }\n    class Calendar {\n        Title\n        Date \n\n    }\n    class WorkoutGraph{\n        Chart\n    }\n  \n\n    SmartWeightsApp <-- Profile\n    SmartWeightsApp <-- VirtualPet\n    SmartWeightsApp <-- ChallengesList\n    SmartWeightsApp <-- PetStore\n    SmartWeightsApp <-- HomePage\n    SmartWeightsApp <-- WorkoutProgress\n    SmartWeightsApp <-- WorkoutPage\n    SmartWeightsApp <-- LoginPage\n   \n\n    HomePage *-- HomePageButtonCarousel\n    HomePage *-- HomePageVideoCarousel\n\n    WorkoutPage *-- WorkoutPageScreenSelector\n    WorkoutPageScreenSelector *-- WorkoutPageSetsDisplay\n    WorkoutPageScreenSelector *-- WorkoutPageFormDisplay\n    WorkoutPageSetsDisplay *-- WorkoutPageSetTracker\n    WorkoutPageSetsDisplay *-- WorkoutPageInsightDisplay\n    WorkoutPageFormDisplay *-- WorkoutPageInsightDisplay\n    WorkoutPageFormDisplay *-- WorkoutPageVideoCarousel\n    WorkoutProgress *-- WorkoutGraph\n    WorkoutProgress *-- Calendar\n\n    Profile *-- Settings\n\n    Profile o-- NavBar\n    VirtualPet o-- NavBar\n    ChallengesList o-- NavBar\n    PetStore o-- NavBar\n    HomePage o-- NavBar\n    WorkoutPage o-- NavBar\n    WorkoutProgress o-- NavBar\n    \n   \n    ChallengesList *-- ChallengeRow\n    ChallengesList *-- ChallengesTab\n\n    "}),"\n",(0,a.jsx)(n.h2,{id:"backend",children:"Backend"}),"\n",(0,a.jsx)(n.p,{children:"The backend represents the ViewModel and Model portion of the architecture.\nThe ViewModels's tasks are to handle any type of logic related to the application. Some are simple such as changing which view to redirect to, or update the current view with new data relevant to their reliant variables. The models are the classes that hold the data elements these views rely on.\nAdditionally, there are classes to connect to external APIs these including: Firebase, SiriKit, AppleHealthKit. These classes establish the connection between the application and API and allow the transfer of data between the two.\nThere is also an API that connects to our hardware (Raspberry Pi Pico W). This API class establishes the connection and requests data from the PI. The PI has its own classes of data that it is sending to the application."}),"\n",(0,a.jsx)(n.mermaid,{value:'---\ntitle: Backend\n---\n\nclassDiagram \n    class LoginPageVM{\n        login()\n    }\n    class LoginPageM{\n        LoginStatus: boolean\n    }\n    class NavBarVM{\n        viewChange()\n    }\n    class VirtualPetVM{\n        UpdatePet()\n        InventoryShow()\n        CustomizeShow()\n        RedirectToShop()\n    }\n    class VirtualPetM{\n        PetHealth : int\n        PetLevel : int \n        Inventory : List [Item]\n    }\n    class ChallengesVM{\n        fetchChallenges()\n        onChallengesFetched()\n        onError()\n    }\n    class ChallengesM{\n        title: String\n        description: String\n        img: Image\n        currentProgress: Int\n        progressGoal: Int\n        reward: String\n        status: Bool\n        progressPercent: Double\n    }\n    class ProfileVM{\n        changeAchievments()\n        editName()\n        editHeight()\n        editWeight()\n        shareProfile()\n    }\n    class ProfileM{\n        displayName: String\n        lvl: int\n        height: int\n        weight: int\n        pet: virtualPet\n        challenges: Challenges\n\n    }\n    class PetStoreVM{\n        purchase()\n    }\n    class PetStoreM{\n        currency: int\n        userPet: Pet\n        pets: Array[Pet]\n        backgrounds: Array[Background]\n        accessories: Array[Accessories]\n        food: Array[Food]   \n    }\n    class Item{\n        name: String\n        description: String\n        price: int\n        itemType: int\n        imageName: String\n    }\n    class Pet{\n\n    }\n    class Background{\n\n    }\n    class Accessory{\n\n    }\n    class Food{\n\n    }\n    class ProgressVM{\n        getForm()\n        getVelocity()\n        getAchievementsEarned()\n        getCurrencyEarned()\n        getFeedback()\n    }\n    class ProgressM{\n        form:int\n        velocity:int\n        achievementsEarned:int\n        currencyEarned:int\n    }\n\n    class CalendarVM{\n        updateDate()\n    }\n    class CalendarM{\n        SelectedDate\n    }\n    class WorkoutVM{\n        StartPI()\n        StartSiri()\n        PostData()\n    }\n    class WorkoutM{\n\n    }\n    class SettingsVM{\n        toggleNotifications()\n        toggleHealthKit()\n    }\n    class SettingsM{\n        notificationsAllowed: boolean\n        healthKitAllowed: boolean\n    }\n    class HomePageButtonCarouselVM{\n        redirect(view)\n    }\n    class WorkoutGraphVM{\n        getFormData()\n        getSpeedData()\n    }\n    class WorkoutGraphM{\n        \n    }\n    class WorkoutData{\n        Speed : int\n        Form : int\n    }\n    \n    class HomePageVideoCarouselVM{\n        getVideo()\n    }\n    class HomePageVideoCarouselM{\n        video : string\n    }\n    \n    class HomePageVideoCarouselVMDBConnector{\n        dbConnect()\n        FetchData()\n        PostData()\n        DeleteData()\n    }\n    %% class APIConnector {\n    %%     <<Interface>>\n    %%     dbConnect()\n    %%     FetchData()\n    %%     PostData()\n    %%     DeleteData()\n    %% }\n    class FirebaseAPIConnector{\n        FetchData()\n        DeleteData()\n        PostData()\n    }\n    class HealthKitConnector{\n        FetchData()\n        DeleteData()\n        PostData()\n    }\n    class SiriKitConnector{\n        FetchData()\n        DeleteData()\n        PostData()\n    }\n    class PIAPI{\n        connect()\n        getData()\n    }\n    class PI{\n        sendData()\n    }\n    class PIData{\n        Position\n        Speed\n        Angle\n        Elevation\n    }\n    LoginPageVM <-- LoginPageM\n    VirtualPetVM <-- VirtualPetM\n    VirtualPetM "1" o-- "*" Item\n    ChallengesVM <-- ChallengesM\n    ProfileVM <-- ProfileM\n    ProfileM o-- VirtualPetM\n    ChallengesM --o ProfileM\n    PetStoreVM <-- PetStoreM\n    PetStoreM "1" o-- "*" Item\n    WorkoutGraphVM <-- WorkoutGraphM\n    WorkoutGraphM o-- WorkoutData\n    WorkoutGraphVM .. ProgressVM\n    HomePageVideoCarouselVM <-- HomePageVideoCarouselM\n    HomePageVideoCarouselVM <-- HomePageVideoCarouselVMDBConnector\n    ProgressVM <-- ProgressM\n    CalendarVM <-- CalendarM\n    Item <|-- Pet\n    Item <|-- Background\n    Item <|-- Accessory\n    Item <|-- Food\n\n    WorkoutVM <-- PIAPI\n    WorkoutVM <-- WorkoutM\n    WorkoutVM <-- SiriKitConnector\n    WorkoutVM <-- FirebaseAPIConnector\n    WorkoutM o-- PIData\n    WorkoutVM <-- HealthKitConnector \n\n    SettingsVM <-- SettingsM\n    PIAPI <-- PI\n    PI "1" o-- "*" PIData\n\n   \n   '})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>r});var a=t(67294);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);