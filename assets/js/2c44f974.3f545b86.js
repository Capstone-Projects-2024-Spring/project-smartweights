"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6528],{66643:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var a=t(85893),i=t(11151);const s={},r="GameCenterManager",c={id:"api-specification/design-api/GameCenterManager",title:"GameCenterManager",description:"Class",source:"@site/docs/api-specification/design-api/GameCenterManager.md",sourceDirName:"api-specification/design-api",slug:"/api-specification/design-api/GameCenterManager",permalink:"/project-smartweights/docs/api-specification/design-api/GameCenterManager",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-smartweights/edit/main/documentation/docs/api-specification/design-api/GameCenterManager.md",tags:[],version:"current",lastUpdatedBy:"Tu",frontMatter:{},sidebar:"docsSidebar",previous:{title:"GameCenterManager.GameCenterDelegate",permalink:"/project-smartweights/docs/api-specification/design-api/GameCenterManager.GameCenterDelegate"},next:{title:"Homepage",permalink:"/project-smartweights/docs/api-specification/design-api/Homepage"}},o={},l=[{value:"Topics",id:"topics",level:2},{value:"Classes",id:"classes",level:3},{value:"Structures",id:"structures",level:3},{value:"Instance Properties",id:"instance-properties",level:3},{value:"Instance Methods",id:"instance-methods",level:3},{value:"Type Properties",id:"type-properties",level:3},{value:"Relationships",id:"relationships",level:3},{value:"Inherits From",id:"inherits-from",level:3},{value:"Conforms To",id:"conforms-to",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"Class"})}),"\n",(0,a.jsx)(n.h1,{id:"gamecentermanager",children:"GameCenterManager"}),"\n",(0,a.jsx)(n.p,{children:"GameCenterManager class to integrate Game Center into the application."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"class GameCenterManager\n"})}),"\n",(0,a.jsx)(n.h2,{id:"topics",children:"Topics"}),"\n",(0,a.jsx)(n.h3,{id:"classes",children:"Classes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"class GameCenterDelegate // GameCenterDelegate class for loading Game Center UI into game.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"structures",children:"Structures"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"struct GameCenterConstants\n"})}),"\n",(0,a.jsx)(n.h3,{id:"instance-properties",children:"Instance Properties"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"var isAuthenticated: Bool\n"})}),"\n",(0,a.jsx)(n.h3,{id:"instance-methods",children:"Instance Methods"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"func authenticateLocalPlayer() // GameCenterManager class function to authenticate.\nfunc checkAchievementCompletion(identifier: String) // GameCenterManager class function to check if an achievement is completed.\nfunc fetchAllAchievementsProgress(completion: ([String : Double]?, Error?) -> Void) // GameCenterManager class function that fetches all achievements and their completion percentages.\nfunc reportAchievement(challenge: Challenge) // GameCenterManager class function to report achievement.\nfunc showGameCenterAchievements() // GameCenterManager class function to display Game Center.\nfunc updateAchievement(identifier: String, progressToAdd: Double) // GameCenterManager class function to update achievement progress.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"type-properties",children:"Type Properties"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"static let shared: GameCenterManager\n"})}),"\n",(0,a.jsx)(n.h3,{id:"relationships",children:"Relationships"}),"\n",(0,a.jsx)(n.h3,{id:"inherits-from",children:"Inherits From"}),"\n",(0,a.jsx)(n.p,{children:"ObjectiveC.NSObject"}),"\n",(0,a.jsx)(n.h3,{id:"conforms-to",children:"Conforms To"}),"\n",(0,a.jsx)(n.p,{children:"Combine.ObservableObject"}),"\n",(0,a.jsx)(n.p,{children:"ObjectiveC.NSObjectProtocol"}),"\n",(0,a.jsx)(n.p,{children:"Swift.CVarArg"}),"\n",(0,a.jsx)(n.p,{children:"Swift.CustomDebugStringConvertible"}),"\n",(0,a.jsx)(n.p,{children:"Swift.CustomStringConvertible"}),"\n",(0,a.jsx)(n.p,{children:"Swift.Equatable"}),"\n",(0,a.jsx)(n.p,{children:"Swift.Hashable"})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var a=t(67294);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);