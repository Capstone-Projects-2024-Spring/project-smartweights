"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[387],{17499:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>o});var n=s(85893),t=s(11151);const r={},l="Database Integration",d={id:"api-specification/database-integration",title:"Database Integration",description:"Class: CloudKitManager",source:"@site/docs/api-specification/database-integration.md",sourceDirName:"api-specification",slug:"/api-specification/database-integration",permalink:"/project-smartweights/docs/api-specification/database-integration",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-smartweights/edit/main/documentation/docs/api-specification/database-integration.md",tags:[],version:"current",lastUpdatedBy:"Daniel Eap",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Design API",permalink:"/project-smartweights/docs/api-specification/api_doc"},next:{title:"Test Procedures",permalink:"/project-smartweights/docs/category/test-procedures"}},c={},o=[{value:"Class: CloudKitManager",id:"class-cloudkitmanager",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3},{value:"Enums",id:"enums",level:3},{value:"Enum: CloudKitError",id:"enum-cloudkiterror",level:4},{value:"Class: BackgroundItemDBManager",id:"class-backgrounditemdbmanager",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Methods",id:"methods-1",level:3},{value:"Enums",id:"enums-1",level:3},{value:"Enum: BackgroundItemRecordKeys",id:"enum-backgrounditemrecordkeys",level:4},{value:"Structs",id:"structs",level:3},{value:"Struct: BackgroundItemModel",id:"struct-backgrounditemmodel",level:4},{value:"Extension: BackgroundItemModel",id:"extension-backgrounditemmodel",level:4},{value:"Observability",id:"observability",level:3},{value:"Class: ClothingItemDBManager",id:"class-clothingitemdbmanager",level:2},{value:"Properties",id:"properties-2",level:3},{value:"Methods",id:"methods-2",level:3},{value:"Enums",id:"enums-2",level:3},{value:"Enum: ClothingItemRecordKeys",id:"enum-clothingitemrecordkeys",level:4},{value:"Structs",id:"structs-1",level:3},{value:"Struct: ClothingItemModel",id:"struct-clothingitemmodel",level:4},{value:"Extension: ClothingItemModel",id:"extension-clothingitemmodel",level:4},{value:"Observability",id:"observability-1",level:3},{value:"Class: FitnessPlanDBManager",id:"class-fitnessplandbmanager",level:2},{value:"Properties",id:"properties-3",level:3},{value:"Methods",id:"methods-3",level:3},{value:"Enums",id:"enums-3",level:3},{value:"Enum: FitnessPlanRecordKeys",id:"enum-fitnessplanrecordkeys",level:4},{value:"Structs",id:"structs-2",level:3},{value:"Struct: FitnessPlanModel",id:"struct-fitnessplanmodel",level:4},{value:"Extension: FitnessPlanModel",id:"extension-fitnessplanmodel",level:4},{value:"Observability",id:"observability-2",level:3},{value:"Class: FoodItemDBManager",id:"class-fooditemdbmanager",level:2},{value:"Properties",id:"properties-4",level:3},{value:"Methods",id:"methods-4",level:3},{value:"Enums",id:"enums-4",level:3},{value:"Enum: FoodItemRecordKeys",id:"enum-fooditemrecordkeys",level:4},{value:"Struct: FoodItemModel",id:"struct-fooditemmodel",level:3},{value:"Properties",id:"properties-5",level:4},{value:"Extension:",id:"extension",level:4},{value:"Observability",id:"observability-3",level:3},{value:"Class: PetItemDBManager",id:"class-petitemdbmanager",level:2},{value:"Properties",id:"properties-6",level:3},{value:"Methods",id:"methods-5",level:3},{value:"Struct: PetItemModel",id:"struct-petitemmodel",level:3},{value:"Properties",id:"properties-7",level:4},{value:"Methods",id:"methods-6",level:4},{value:"Enums",id:"enums-5",level:3},{value:"Enum: PetItemRecordKeys",id:"enum-petitemrecordkeys",level:4},{value:"Observability",id:"observability-4",level:3},{value:"Class: PetDBManager",id:"class-petdbmanager",level:2},{value:"Properties",id:"properties-8",level:3},{value:"Methods",id:"methods-7",level:3},{value:"Struct: PetModel",id:"struct-petmodel",level:3},{value:"Properties",id:"properties-9",level:4},{value:"Methods",id:"methods-8",level:4},{value:"Enums",id:"enums-6",level:3},{value:"Enum: PetRecordKeys",id:"enum-petrecordkeys",level:4},{value:"Observability",id:"observability-5",level:3},{value:"Class: UserDBManager",id:"class-userdbmanager",level:2},{value:"Properties",id:"properties-10",level:3},{value:"Methods",id:"methods-9",level:3},{value:"Struct: User",id:"struct-user",level:3},{value:"Properties",id:"properties-11",level:4},{value:"Methods",id:"methods-10",level:4},{value:"Enums",id:"enums-7",level:3},{value:"Enum: UserRecordKeys",id:"enum-userrecordkeys",level:4},{value:"Observability",id:"observability-6",level:3},{value:"Class: CoreDataManager",id:"class-coredatamanager",level:2},{value:"Topics",id:"topics",level:3},{value:"Initializers",id:"initializers",level:4},{value:"Instance Properties",id:"instance-properties",level:4},{value:"Instance Methods",id:"instance-methods",level:4},{value:"Default Implementations",id:"default-implementations",level:3},{value:"ObservableObject Implementations",id:"observableobject-implementations",level:4},{value:"Relationships",id:"relationships",level:3},{value:"Conforms To",id:"conforms-to",level:4},{value:"Class: WorkoutSession",id:"class-workoutsession",level:2},{value:"Topics",id:"topics-1",level:3},{value:"Instance Properties",id:"instance-properties-1",level:4},{value:"Instance Methods",id:"instance-methods-1",level:4},{value:"Type Methods",id:"type-methods",level:4},{value:"Default Implementations",id:"default-implementations-1",level:3},{value:"Identifiable Implementations",id:"identifiable-implementations",level:4},{value:"Relationships",id:"relationships-1",level:3},{value:"Inherits From",id:"inherits-from",level:4},{value:"Inherited By",id:"inherited-by",level:4},{value:"Conforms To",id:"conforms-to-1",level:4},{value:"Class: ExerciseSet",id:"class-exerciseset",level:2},{value:"Topics",id:"topics-2",level:3},{value:"Instance Properties",id:"instance-properties-2",level:4},{value:"Type Methods",id:"type-methods-1",level:4},{value:"Relationships",id:"relationships-2",level:3},{value:"Inherits From",id:"inherits-from-1",level:4},{value:"Conforms To",id:"conforms-to-2",level:4}];function a(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components},{Details:s}=i;return s||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"database-integration",children:"Database Integration"}),"\n",(0,n.jsx)(i.h1,{id:"cloud-database",children:"Cloud Database"}),"\n",(0,n.jsx)(i.h2,{id:"class-cloudkitmanager",children:"Class: CloudKitManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:(0,n.jsx)(i.p,{children:"Manages the CloudKit container and databases, providing methods to interact with CloudKit."})}),(0,n.jsx)(i.p,{children:"Acts as the main entry point to CloudKit for any of the classes that will interact with records. This class provides the base methods for CRUD operations."}),(0,n.jsx)(i.h3,{id:"properties",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"static let shared = CloudKitManager()"}),": The shared singleton instance of ",(0,n.jsx)(i.code,{children:"CloudKitManager"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let container: CKContainer"}),": The CloudKit container."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let publicDatabase: CKDatabase"}),": The public CloudKit database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let privateDatabase: CKDatabase"}),": The private CloudKit database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var isSignedInToiCloud: Bool"}),": Indicates whether the user is signed in to iCloud."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var error: String"}),": Any error occurred during CloudKit operations."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var text: String"}),": Additional text data."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"methods",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init()"}),": Initializes the ",(0,n.jsx)(i.code,{children:"CloudKitManager"})," singleton instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"private func getiCloudStatus()"}),": Retrieves the iCloud account status and updates the ",(0,n.jsx)(i.code,{children:"isSignedInToiCloud"})," property accordingly."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func saveItem(record: CKRecord)"}),": Saves a record to the public database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func savePrivateItem(record: CKRecord, completion: @escaping (Error?) -> Void)"}),": Saves a record to the private database with a completion handler."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"private func p_saveRecord(record: CKRecord, usePrivateDatabase: Bool)"}),": Private method to save a record to the specified database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"private func p_fetchRecord(recordType: String, usePrivateDatabase: Bool, fieldName: String?, fieldValue: Any?, completion: @escaping ([CKRecord]?, Error?) -> Void)"}),": Private method to fetch records from the specified database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchPublicRecord(recordType: String, fieldName: String, fieldValue: Any?, completion: @escaping ([CKRecord]?, Error?) -> Void)"}),": Fetches public records from the CloudKit database based on a specified field name and value."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchPublicRecord(recordType: String, completion: @escaping ([CKRecord]?, Error?) -> Void)"}),": Fetches public records from the CloudKit database of a specified record type."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchPrivateRecord<T>(recordType: String, fieldName: String, fieldValue: T, completion: @escaping ([CKRecord]?, Error?) -> Void)"}),": Fetches private records from the CloudKit database based on a specified field name and value."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchPrivateRecord(recordType: String, completion: @escaping ([CKRecord]?, Error?) -> Void)"}),": Fetches private records from the CloudKit database of a specified record type."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchPrivateRecord(recordID: CKRecord.ID, completion: @escaping (CKRecord?, Error?) -> Void)"}),": Fetches a single private record from the CloudKit database by its ID."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"enums",children:"Enums"}),(0,n.jsx)(i.h4,{id:"enum-cloudkiterror",children:"Enum: CloudKitError"}),(0,n.jsx)(i.p,{children:"Enumerates CloudKit errors."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case iCloudAccountNotFound"}),": iCloud account not found error."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case iCloudAccountNotDetermined"}),": iCloud account not determined error."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case iCloudAccountRestricted"}),": iCloud account restricted error."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case iCloudAccountUnknown"}),": Unknown iCloud account error."]}),"\n"]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-backgrounditemdbmanager",children:"Class: BackgroundItemDBManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Manages the background items stored in the CloudKit database and provides methods to interact with them."}),(0,n.jsx)(i.h3,{id:"properties-1",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"static let shared: BackgroundItemDBManager"}),": The shared singleton instance of ",(0,n.jsx)(i.code,{children:"BackgroundItemDBManager"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var backgroundItems: [BackgroundItemModel]"}),": The array of background items."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let CKManager: CloudKitManager"}),": The CloudKit manager instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var backgroundItemExists: Bool"}),": Indicates if background items exist in the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var activeBackground: String"}),": The name of the currently active background item."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"methods-1",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init()"}),": Initializes the ",(0,n.jsx)(i.code,{children:"BackgroundItemDBManager"})," instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchBackgroundItems(completion: @escaping ([BackgroundItemModel]?, Error?) -> Void)"}),": Fetches background items from the CloudKit database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchSpecifcBackgroundItem(imageName: String, completion: @escaping (BackgroundItemModel?, Error?) -> Void)"}),": Fetches a specific background item by its image name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createBackgroundItem(imageName: String, completion: @escaping (Error?) -> Void)"}),": Creates a new background item in the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func setActiveBackgroundItem(imageName: String, completion: @escaping (String, Error?) -> Void)"}),": Sets a background item as active."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func setUnactiveAllBackgroundItems(completion: @escaping (Error?) -> Void)"}),": Sets all background items as inactive."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func g_getActiveBackground() -> String"}),": Returns activeBackground."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"enums-1",children:"Enums"}),(0,n.jsx)(i.h4,{id:"enum-backgrounditemrecordkeys",children:"Enum: BackgroundItemRecordKeys"}),(0,n.jsx)(i.p,{children:"Enumerates the keys used for storing background item data in CloudKit."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'case type = "BackgroundItem"'}),": Represents the record type for background items in CloudKit."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case isActive"}),": Represents the key for the 'isActive' property in CloudKit records."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case imageName"}),": Represents the key for the 'imageName' property in CloudKit records."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"structs",children:"Structs"}),(0,n.jsx)(i.h4,{id:"struct-backgrounditemmodel",children:"Struct: BackgroundItemModel"}),(0,n.jsx)(i.p,{children:"Represents a background item with its properties."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var recordId: CKRecord.ID?"}),": The record ID of the background item."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var isActive: Int64"}),": Indicates whether the background item is active or not."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var imageName: String"}),": The name of the image associated with the background item."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"extension-backgrounditemmodel",children:"Extension: BackgroundItemModel"}),(0,n.jsxs)(i.p,{children:["Provides an extension to ",(0,n.jsx)(i.code,{children:"BackgroundItemModel"})," for generating a CKRecord representation."]}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var record: CKRecord"}),": Generates and returns a CKRecord representation of the background item."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"observability",children:"Observability"}),(0,n.jsxs)(i.p,{children:["This class conforms to the ",(0,n.jsx)(i.code,{children:"ObservableObject"})," protocol."]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-clothingitemdbmanager",children:"Class: ClothingItemDBManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Manages the clothing items stored in the CloudKit database and provides methods to interact with them."}),(0,n.jsx)(i.h3,{id:"properties-2",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"static let shared: ClothingItemDBManager"}),": The shared singleton instance of ",(0,n.jsx)(i.code,{children:"ClothingItemDBManager"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var clothingItems: [ClothingItemModel]"}),": The array of clothing items."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let CKManager: CloudKitManager"}),": The CloudKit manager instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var clothingItemExists: Bool"}),": Indicates if clothing items exist in the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var activeClothing: String"}),": The name of the currently active clothing item."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"methods-2",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init()"}),": Initializes the ",(0,n.jsx)(i.code,{children:"ClothingItemDBManager"})," instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchClothingItems(completion: @escaping ([ClothingItemModel]?, Error?) -> Void)"}),": Fetches clothing items from the CloudKit database. Upon completion, sets the ",(0,n.jsx)(i.code,{children:"clothingItems"})," property."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchSpecificClothingItem(imageName: String, completion: @escaping (ClothingItemModel?, Error?) -> Void)"}),": Fetches a specific clothing item by its image name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createClothingItem(imageName: String, completion: @escaping (Error?) -> Void)"}),": Creates a new clothing item in the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func setActiveClothingItem(imageName: String, completion: @escaping (String, Error?) -> Void)"}),": Sets a clothing item as active. Upon completion, sets the ",(0,n.jsx)(i.code,{children:"activeClothing"})," property."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func setUnactiveAllClothingItems(completion: @escaping (Error?) -> Void)"}),": Sets all clothing items as inactive."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func g_getActiveClothing() -> String"}),": Returns activeClothing."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getActiveClothing(completion: @escaping (String, Error?) -> Void)"}),": Fetches the active clothing item from the database."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"enums-2",children:"Enums"}),(0,n.jsx)(i.h4,{id:"enum-clothingitemrecordkeys",children:"Enum: ClothingItemRecordKeys"}),(0,n.jsx)(i.p,{children:"Enumerates the keys used for storing clothing item data in CloudKit."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'case type = "ClothingItem"'}),": Represents the record type for clothing items in CloudKit."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case isActive"}),": Represents the key for the 'isActive' property in CloudKit records."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case imageName"}),": Represents the key for the 'imageName' property in CloudKit records."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"structs-1",children:"Structs"}),(0,n.jsx)(i.h4,{id:"struct-clothingitemmodel",children:"Struct: ClothingItemModel"}),(0,n.jsx)(i.p,{children:"Represents a clothing item with its properties."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var recordId: CKRecord.ID?"}),": The record ID of the clothing item."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var isActive: Int64"}),": Indicates whether the clothing item is active or not."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var imageName: String"}),": The name of the image associated with the clothing item."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"extension-clothingitemmodel",children:"Extension: ClothingItemModel"}),(0,n.jsxs)(i.p,{children:["Provides an extension to ",(0,n.jsx)(i.code,{children:"ClothingItemModel"})," for generating a CKRecord representation."]}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var record: CKRecord"}),": Generates and returns a CKRecord representation of the clothing item."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"observability-1",children:"Observability"}),(0,n.jsxs)(i.p,{children:["This class conforms to the ",(0,n.jsx)(i.code,{children:"ObservableObject"})," protocol."]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-fitnessplandbmanager",children:"Class: FitnessPlanDBManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Manages fitness plans stored in the CloudKit database and provides methods to interact with them."}),(0,n.jsx)(i.h3,{id:"properties-3",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var fitnessPlan: FitnessPlanModel?"}),": The fitness plan model."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let CKManager: CloudKitManager"}),": The CloudKit manager instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var fitnessPlanExists: Bool"}),": Indicates whether a fitness plan exists in the database."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"methods-3",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init()"}),": Initializes the ",(0,n.jsx)(i.code,{children:"FitnessPlanDBManager"})," instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createFitnessPlan(daysPerWeekGoal: Int64, dumbbellWeightGoal: Int64, setGoal: Int64, repGoal: Int64, notes: String, selectedDate: Date)"}),": Creates or updates a fitness plan in the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchFitnessPlan(completion: @escaping (FitnessPlanModel?, Error?) -> Void)"}),": Fetches the fitness plan from the CloudKit database."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"enums-3",children:"Enums"}),(0,n.jsx)(i.h4,{id:"enum-fitnessplanrecordkeys",children:"Enum: FitnessPlanRecordKeys"}),(0,n.jsx)(i.p,{children:"Enumerates the keys used for storing fitness plan data in CloudKit."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'case type = "FitnessPlan"'}),": Represents the record type for fitness plans in CloudKit."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case daysPerWeekGoal"}),": Represents the key for the 'daysPerWeekGoal' property in CloudKit records."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case dumbbellWeightGoal"}),": Represents the key for the 'dumbbellWeightGoal' property in CloudKit records."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case setGoal"}),": Represents the key for the 'setGoal' property in CloudKit records."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case repGoal"}),": Represents the key for the 'repGoal' property in CloudKit records."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case notes"}),": Represents the key for the 'notes' property in CloudKit records."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case selectedDate"}),": Represents the key for the 'selectedDate' property in CloudKit records."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"structs-2",children:"Structs"}),(0,n.jsx)(i.h4,{id:"struct-fitnessplanmodel",children:"Struct: FitnessPlanModel"}),(0,n.jsx)(i.p,{children:"Represents a fitness plan with its properties."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var recordId: CKRecord.ID?"}),": The record ID of the fitness plan."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var daysPerWeekGoal: Int64"}),": The goal for the number of days per week."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var dumbbellWeightGoal: Int64"}),": The goal for the dumbbell weight."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var setGoal: Int64"}),": The goal for the number of sets."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var repGoal: Int64"}),": The goal for the number of reps."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var notes: String"}),": Any additional notes for the fitness plan."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var selectedDate: Date"}),": The selected date for the fitness plan."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"extension-fitnessplanmodel",children:"Extension: FitnessPlanModel"}),(0,n.jsxs)(i.p,{children:["Provides an extension to ",(0,n.jsx)(i.code,{children:"FitnessPlanModel"})," for generating a CKRecord representation."]}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var record: CKRecord"}),": Generates and returns a CKRecord representation of the fitness plan."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"observability-2",children:"Observability"}),(0,n.jsxs)(i.p,{children:["This class conforms to the ",(0,n.jsx)(i.code,{children:"ObservableObject"})," protocol."]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-fooditemdbmanager",children:"Class: FoodItemDBManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Manages food items and their interactions with the CloudKit database."}),(0,n.jsx)(i.h3,{id:"properties-4",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"static let shared = FoodItemDBManager()"}),": The shared singleton instance of ",(0,n.jsx)(i.code,{children:"FoodItemDBManager"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var foodItems: [FoodItemModel]"}),": An array of food items."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let CKManager = CloudKitManager()"}),": The CloudKit manager."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var foodItemExists: Bool"}),": Indicates whether food items exist."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"methods-4",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init()"}),": Initializes the ",(0,n.jsx)(i.code,{children:"FoodItemDBManager"})," singleton instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchFoodItems(completion: @escaping ([FoodItemModel]?, Error?) -> Void)"}),": Fetches all food items from the CloudKit database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createInitialFoodItems()"}),": Creates initial food items if none exist."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createFoodItem(name: String, quantity: Int64, completion: @escaping (Error?) -> Void)"}),": Creates a new food item with the given name and quantity."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchSpecificFoodItem(name: String, completion: @escaping (FoodItemModel?, Error?) -> Void)"}),": Fetches a specific food item by its name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchQuantity(name: String, completion: @escaping (Int64?, Error?) -> Void)"}),": Fetches the quantity of a specific food item by its name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateQuantity_add(name: String, quantity: Int64, completion: @escaping (Error?) -> Void)"}),": Updates the quantity of a food item by adding the specified quantity."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateQuantity(name: String, newQuantity: Int64, completion: @escaping (Error?) -> Void)"}),": Updates the quantity of a food item with the specified quantity."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateQuantity(foodItem: FoodItemModel, newQuantity: Int64, completion: @escaping (Error?) -> Void)"}),": Updates the quantity of a food item."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getFoodItems() -> [FoodItemModel]"}),": Returns foodItems."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"enums-4",children:"Enums"}),(0,n.jsx)(i.h4,{id:"enum-fooditemrecordkeys",children:"Enum: FoodItemRecordKeys"}),(0,n.jsx)(i.p,{children:"Enumerates the keys used for food item records in CloudKit."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'case type = "FoodItem"'}),": Record type key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case name"}),": Name key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case quantity"}),": Quantity key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case imageName"}),": Image name key."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"struct-fooditemmodel",children:"Struct: FoodItemModel"}),(0,n.jsx)(i.p,{children:"Represents a food item."}),(0,n.jsx)(i.h4,{id:"properties-5",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var recordId: CKRecord.ID?"}),": The record ID."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var name: String"}),": The name of the food item."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var quantity: Int64"}),": The quantity of the food item."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var imageName: String"}),": The name of the image associated with the food item."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"extension",children:"Extension:"}),(0,n.jsxs)(i.p,{children:["Provides an extension to ",(0,n.jsx)(i.code,{children:"FoodItemModel"})," for generating a CKRecord representation."]}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var record: CKRecord"}),": Generates and returns a CKRecord representation of the food item."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"observability-3",children:"Observability"}),(0,n.jsxs)(i.p,{children:["This class conforms to the ",(0,n.jsx)(i.code,{children:"ObservableObject"})," protocol."]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-petitemdbmanager",children:"Class: PetItemDBManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Manages pet items and their interactions with the CloudKit database."}),(0,n.jsx)(i.h3,{id:"properties-6",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"static let shared = PetItemDBManager()"}),": The shared singleton instance of ",(0,n.jsx)(i.code,{children:"PetItemDBManager"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var petItems: [PetItemModel]"}),": An array of pet items."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let CKManager = CloudKitManager()"}),": The CloudKit manager."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var petItemExists: Bool"}),": Indicates whether pet items exist."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var activePet: String"}),": The name of the active pet."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"methods-5",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init()"}),": Initializes the ",(0,n.jsx)(i.code,{children:"PetItemDBManager"})," singleton instance."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func g_getActivePet() -> String"}),": Returns activePet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchPetItems(completion: @escaping ([PetItemModel]?, Error?) -> Void)"}),": Fetches all pet items from the CloudKit database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchSpecificPetItem(imageName: String, completion: @escaping (PetItemModel?, Error?) -> Void)"}),": Fetches a specific pet item by its image name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createPetItem(imageName: String, completion: @escaping (Error?) -> Void)"}),": Creates a new pet item with the given image name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createDefaultPet()"}),": Creates a default pet if none exist."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func setActivePetItem(imageName: String, completion: @escaping (String, Error?) -> Void)"}),": Sets the active pet item by its image name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getActivePet(completion: @escaping (String, Error?) -> Void)"}),": Retrieves the active pet."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"struct-petitemmodel",children:"Struct: PetItemModel"}),(0,n.jsx)(i.p,{children:"Represents a pet item."}),(0,n.jsx)(i.h4,{id:"properties-7",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var recordId: CKRecord.ID?"}),": The record ID."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var isActive: Int64"}),": Indicates whether the pet item is active."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var petName: String"}),": The name of the pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var imageName: String"}),": The name of the image associated with the pet."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"methods-6",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var record: CKRecord"}),": Converts the ",(0,n.jsx)(i.code,{children:"PetItemModel"})," to a ",(0,n.jsx)(i.code,{children:"CKRecord"})," object."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"enums-5",children:"Enums"}),(0,n.jsx)(i.h4,{id:"enum-petitemrecordkeys",children:"Enum: PetItemRecordKeys"}),(0,n.jsx)(i.p,{children:"Enumerates the keys used for pet item records in CloudKit."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'case type = "PetItem"'}),": Record type key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case isActive"}),": Active state key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case petName"}),": Pet name key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case imageName"}),": Image name key."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"observability-4",children:"Observability"}),(0,n.jsxs)(i.p,{children:["This class conforms to the ",(0,n.jsx)(i.code,{children:"ObservableObject"})," protocol."]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-petdbmanager",children:"Class: PetDBManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Manages pet data and interactions with the CloudKit database."}),(0,n.jsx)(i.h3,{id:"properties-8",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"static let shared = PetDBManager()"}),": The shared singleton instance of ",(0,n.jsx)(i.code,{children:"PetDBManager"}),"."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var pet: PetModel?"}),": The pet model."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let CKManager = CloudKitManager()"}),": The CloudKit manager."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var petExists: Bool"}),": Indicates whether a pet exists."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var totalXP: Int64"}),": The total experience points (XP) of the pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var level: Int64"}),": The level of the pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var health: Int64"}),": The health of the pet."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"methods-7",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init()"}),": Initializes the ",(0,n.jsx)(i.code,{children:"PetDBManager"})," singleton instance and fetches the pet from the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createPet()"}),": Creates a new pet in the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchPet(completion: @escaping (PetModel?, Error?) -> Void)"}),": Fetches the pet from the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getHealth() -> Int"}),": Returns health."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getXP(completion: @escaping (Int64?, Error?) -> Void)"}),": Retrieves the total XP of the pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getXP() -> Int"}),": Returns totalXP."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getLevel() -> Int"}),": Returns level."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getLevel(completion: @escaping (Int64?, Error?) -> Void)"}),": Retrieves the level of the pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getPet() -> PetModel?"}),": Returns pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateUserXP(newXP: Int64, completion: @escaping (Error?) -> Void)"}),": Updates the user's XP."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateUserLevel(newLevel: Int64, completion: @escaping (Error?) -> Void)"}),": Updates the user's level."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updatePetHealth(newHealth: Int64, completion: @escaping (Error?) -> Void)"}),": Updates the pet's health."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"struct-petmodel",children:"Struct: PetModel"}),(0,n.jsx)(i.p,{children:"Represents a pet."}),(0,n.jsx)(i.h4,{id:"properties-9",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var recordId: CKRecord.ID?"}),": The record ID."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var health: Int64"}),": The health of the pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var level: Int64"}),": The level of the pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var petImage: CKAsset?"}),": The image of the pet."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var totalXP: Int64"}),": The total XP of the pet."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"methods-8",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var record: CKRecord"}),": Converts the ",(0,n.jsx)(i.code,{children:"PetModel"})," to a ",(0,n.jsx)(i.code,{children:"CKRecord"})," object."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"enums-6",children:"Enums"}),(0,n.jsx)(i.h4,{id:"enum-petrecordkeys",children:"Enum: PetRecordKeys"}),(0,n.jsx)(i.p,{children:"Enumerates the keys used for pet records in CloudKit."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'case type = "Pet"'}),": Record type key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case health"}),": Health key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case level"}),": Level key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case petImage"}),": Pet image key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case totalXP"}),": Total XP key."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"observability-5",children:"Observability"}),(0,n.jsxs)(i.p,{children:["This class conforms to the ",(0,n.jsx)(i.code,{children:"ObservableObject"})," protocol."]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-userdbmanager",children:"Class: UserDBManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Manages user data and interactions with the CloudKit database."}),(0,n.jsx)(i.h3,{id:"properties-10",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var user: User?"}),": The user model."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"@Published var userRecord: CKRecord.Reference?"}),": The user record reference."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var userExists: Bool"}),": Indicates whether a user exists."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"let CKManager = CloudKitManager()"}),": The CloudKit manager."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"methods-9",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init()"}),": Initializes the ",(0,n.jsx)(i.code,{children:"UserDBManager"})," and fetches the current user record ID and user data."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchCurrentUserRecordID(completion: @escaping (Error?) -> Void)"}),": Fetches the record ID of the current user."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createUser(firstName: String?, lastName: String?, email: String?)"}),": Creates a new user with the given information."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchUser(completion: @escaping (User?, Error?) -> Void)"}),": Fetches the user data from the database."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getCurrency(completion: @escaping (Int64?, Error?) -> Void)"}),": Retrieves the currency value of the user."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateCurrency(newCurrency: Int64, completion: @escaping (Error?) -> Void)"}),": Updates the currency value of the user."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getName(completion: @escaping (String?, Error?) -> Void)"}),": Retrieves the full name of the user."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateName(newFirstName: String?, newLastName: String?, completion: @escaping (Error?) -> Void)"}),": Updates the first name and/or last name of the user."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"struct-user",children:"Struct: User"}),(0,n.jsx)(i.p,{children:"Represents a user."}),(0,n.jsx)(i.h4,{id:"properties-11",children:"Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var recordId: CKRecord.ID?"}),": The record ID."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var firstName: String"}),": The first name of the user."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var lastName: String"}),": The last name of the user."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var latestLogin: Date"}),": The latest login date of the user."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var currency: Int64"}),": The currency of the user."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var email: String"}),": The email of the user."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"methods-10",children:"Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var record: CKRecord"}),": Converts the ",(0,n.jsx)(i.code,{children:"User"})," to a ",(0,n.jsx)(i.code,{children:"CKRecord"})," object."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"enums-7",children:"Enums"}),(0,n.jsx)(i.h4,{id:"enum-userrecordkeys",children:"Enum: UserRecordKeys"}),(0,n.jsx)(i.p,{children:"Enumerates the keys used for user records in CloudKit."}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:'case type = "User"'}),": Record type key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case firstName"}),": First name key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case lastName"}),": Last name key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case latestLogin"}),": Latest login key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case currency"}),": Currency key."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"case email"}),": Email key."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"observability-6",children:"Observability"}),(0,n.jsxs)(i.p,{children:["This class conforms to the ",(0,n.jsx)(i.code,{children:"ObservableObject"})," protocol."]})]}),"\n",(0,n.jsx)(i.h1,{id:"local-coredata-database",children:"Local CoreData Database"}),"\n",(0,n.jsx)(i.h2,{id:"class-coredatamanager",children:"Class: CoreDataManager"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)(i.p,{children:"Manages persistent data storage using Core Data for the SmartWeights application."}),(0,n.jsx)(i.h3,{id:"topics",children:"Topics"}),(0,n.jsx)(i.h4,{id:"initializers",children:"Initializers"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"init(container: NSPersistentCloudKitContainer, storeDescriptions: [NSPersistentStoreDescription]?)"}),": Initializes the CoreDataManager with the specified persistent container and optional store configurations."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"instance-properties",children:"Instance Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"var persistentContainer: NSPersistentCloudKitContainer"}),": The shared persistent container from the PersistenceController, configured for CloudKit integration."]}),"\n"]}),(0,n.jsx)(i.h4,{id:"instance-methods",children:"Instance Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createExerciseSet(workoutSession: WorkoutSession, setNum: Int, avgCurlAcceleration: Double, avgElbowFlareLR: Double, avgElbowFlareUD: Double, avgElbowSwing: Double, avgWristStabilityLR: Double, avgWristStabilityUD: Double) -> ExerciseSet?"}),": Creates and persists a new ExerciseSet entity associated with a given WorkoutSession."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func createWorkoutSession(dateTime: Date, workoutNum: Int, reps: Int, weight: Double, overallCurlAcceleration: Double, overallElbowFlareLR: Double, overallElbowFlareUD: Double, overallElbowSwing: Double, overallWristStabilityLR: Double, overallWristStabilityUD: Double) -> WorkoutSession?"}),": Creates and saves a new WorkoutSession entity with specified parameters."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchAllExerciseSets() -> [ExerciseSet]"}),": Fetches all ExerciseSet entities from the persistent store."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchExerciseSets(for: WorkoutSession) -> [ExerciseSet]"}),": Fetches ExerciseSet entities associated with a specific WorkoutSession."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchExerciseSets(for: Int64) -> [[String : Any]]"}),": Fetches ExerciseSet entities based on a specific workout number."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchWorkoutSessions() -> [WorkoutSession]"}),": Fetches all WorkoutSession entities from the persistent store."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func fetchWorkoutSessions(on: Date) -> [[String : Any]]"}),": Fetches WorkoutSession entities on a specific date from the persistent store."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func getNextWorkoutNumber() -> Int"}),": Retrieves the next sequential workout number to be used for a new WorkoutSession, defaulting to 1 if no sessions exist."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateExerciseSet(ExerciseSet, setNum: Int?, avgCurlAcceleration: Double?, avgElbowFlareLR: Double?, avgElbowFlareUD: Double?, avgElbowSwing: Double?, avgWristStabilityLR: Double?, avgWristStabilityUD: Double?)"}),": Updates properties of an ExerciseSet entity."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"func updateWorkoutSession(WorkoutSession, dateTime: Date?, overallCurlAcceleration: Double?, overallElbowFlareLR: Double?, overallElbowFlareUD: Double?, overallElbowSwing: Double?, overallWristStabilityLR: Double?, overallWristStabilityUD: Double?)"}),": Updates properties of a WorkoutSession entity."]}),"\n"]}),(0,n.jsx)(i.h3,{id:"default-implementations",children:"Default Implementations"}),(0,n.jsx)(i.h4,{id:"observableobject-implementations",children:"ObservableObject Implementations"}),(0,n.jsx)(i.h3,{id:"relationships",children:"Relationships"}),(0,n.jsx)(i.h4,{id:"conforms-to",children:"Conforms To"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"Combine.ObservableObject"})}),"\n"]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-workoutsession",children:"Class: WorkoutSession"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"  @objc(WorkoutSession)\n  class WorkoutSession\n"})}),(0,n.jsx)(i.h3,{id:"topics-1",children:"Topics"}),(0,n.jsx)(i.h4,{id:"instance-properties-1",children:"Instance Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var dateTime: Date?"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var overallCurlAcceleration: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var overallElbowFlareLeftRight: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var overallElbowFlareUpDown: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var overallElbowSwing: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var overallWristStabilityLeftRight: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var overallWristStabilityUpDown: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var reps: Int64"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var sets: NSSet?"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var weight: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var workoutNum: Int64"})}),"\n"]}),(0,n.jsx)(i.h4,{id:"instance-methods-1",children:"Instance Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"func addToSets(NSSet)"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"func addToSets(ExerciseSet)"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"func removeFromSets(NSSet)"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"func removeFromSets(ExerciseSet)"})}),"\n"]}),(0,n.jsx)(i.h4,{id:"type-methods",children:"Type Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["class func fetchRequest() -> ",(0,n.jsx)(i.code,{children:"NSFetchRequest<WorkoutSession>"})]}),"\n"]}),(0,n.jsx)(i.h3,{id:"default-implementations-1",children:"Default Implementations"}),(0,n.jsx)(i.h4,{id:"identifiable-implementations",children:"Identifiable Implementations"}),(0,n.jsx)(i.h3,{id:"relationships-1",children:"Relationships"}),(0,n.jsx)(i.h4,{id:"inherits-from",children:"Inherits From"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"CoreData.NSManagedObject"}),"\n"]}),(0,n.jsx)(i.h4,{id:"inherited-by",children:"Inherited By"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"ExerciseSet"}),"\n"]}),(0,n.jsx)(i.h4,{id:"conforms-to-1",children:"Conforms To"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Combine.ObservableObject"}),"\n",(0,n.jsx)(i.li,{children:"CoreData.NSFetchRequestResult"}),"\n",(0,n.jsx)(i.li,{children:"ObjectiveC.NSObjectProtocol"}),"\n",(0,n.jsx)(i.li,{children:"Swift.CVarArg"}),"\n",(0,n.jsx)(i.li,{children:"Swift.CustomDebugStringConvertible"}),"\n",(0,n.jsx)(i.li,{children:"Swift.CustomStringConvertible"}),"\n",(0,n.jsx)(i.li,{children:"Swift.Equatable"}),"\n",(0,n.jsx)(i.li,{children:"Swift.Hashable"}),"\n",(0,n.jsx)(i.li,{children:"Swift.Identifiable"}),"\n"]})]}),"\n",(0,n.jsx)(i.h2,{id:"class-exerciseset",children:"Class: ExerciseSet"}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"@objc(ExerciseSet)\nclass ExerciseSet\n"})}),(0,n.jsx)(i.h3,{id:"topics-2",children:"Topics"}),(0,n.jsx)(i.h4,{id:"instance-properties-2",children:"Instance Properties"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var avgCurlAcceleration: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var avgElbowFlareLeftRight: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var avgElbowFlareUpDown: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var avgElbowSwing: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var avgWristStabilityLeftRight: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var avgWristStabilityUpDown: Double"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var setNum: Int64"})}),"\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"var workoutSession: WorkoutSession?"})}),"\n"]}),(0,n.jsx)(i.h4,{id:"type-methods-1",children:"Type Methods"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"class func fetchRequest() -> NSFetchRequest<ExerciseSet>"})}),"\n"]}),(0,n.jsx)(i.h3,{id:"relationships-2",children:"Relationships"}),(0,n.jsx)(i.h4,{id:"inherits-from-1",children:"Inherits From"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"WorkoutSession"}),"\n"]}),(0,n.jsx)(i.h4,{id:"conforms-to-2",children:"Conforms To"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Combine.ObservableObject"}),"\n",(0,n.jsx)(i.li,{children:"CoreData.NSFetchRequestResult"}),"\n",(0,n.jsx)(i.li,{children:"ObjectiveC.NSObjectProtocol"}),"\n",(0,n.jsx)(i.li,{children:"Swift.CVarArg"}),"\n",(0,n.jsx)(i.li,{children:"Swift.CustomDebugStringConvertible"}),"\n",(0,n.jsx)(i.li,{children:"Swift.CustomStringConvertible"}),"\n",(0,n.jsx)(i.li,{children:"Swift.Equatable"}),"\n",(0,n.jsx)(i.li,{children:"Swift.Hashable"}),"\n",(0,n.jsx)(i.li,{children:"Swift.Identifiable"}),"\n"]})]})]})}function h(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},11151:(e,i,s)=>{s.d(i,{Z:()=>d,a:()=>l});var n=s(67294);const t={},r=n.createContext(t);function l(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);