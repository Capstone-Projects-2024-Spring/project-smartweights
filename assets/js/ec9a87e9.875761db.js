"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[424],{77987:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(85893),s=t(11151);const i={sidebar_position:9},r="Database Diagrams",o={id:"system-architecture/database-diagrams",title:"Database Diagrams",description:"SmartWeights uses a NoSQL approach to the database design. It combines usage of both cloud based database (Firebase) and local storage database (CoreData).",source:"@site/docs/system-architecture/database-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/database-diagrams",permalink:"/project-smartweights/docs/system-architecture/database-diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2024-Spring/project-smartweights/edit/main/documentation/docs/system-architecture/database-diagrams.md",tags:[],version:"current",lastUpdatedBy:"Jonathan Stanczak",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"docsSidebar",previous:{title:"Circuit Diagram",permalink:"/project-smartweights/docs/system-architecture/circuit-diagram"},next:{title:"Neural Network Paradigm",permalink:"/project-smartweights/docs/system-architecture/neural-network-paradigm"}},d={},c=[{value:"Firebase Database Design, User",id:"firebase-database-design-user",level:2},{value:"Firebase Database Design, Shop",id:"firebase-database-design-shop",level:2},{value:"CoreData Database Design",id:"coredata-database-design",level:2}];function h(e){const n={em:"em",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"database-diagrams",children:"Database Diagrams"}),"\n",(0,a.jsx)(n.p,{children:"SmartWeights uses a NoSQL approach to the database design. It combines usage of both cloud based database (Firebase) and local storage database (CoreData)."}),"\n",(0,a.jsx)(n.h2,{id:"firebase-database-design-user",children:"Firebase Database Design, User"}),"\n",(0,a.jsx)(n.p,{children:'This section of the database shows the data the user themselves have and can manipulate. This is somewhat representative of a "snowflake schema". It represents data relevant to the user\'s:'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Profile"}),"\n",(0,a.jsx)(n.li,{children:"Achievements"}),"\n",(0,a.jsx)(n.li,{children:"Pet"}),"\n",(0,a.jsx)(n.li,{children:"Fitness Data"}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: NoSQL ERD (Cloud base, User)\n---\nerDiagram \n    User ||--o{ UserProfile : has\n    User ||--|| Apple : has\n    User ||--||Achievement_List: has\n    UserProfile ||--||Fitness_data: contains\n    User ||--||Pet:has\n    Pet ||--|| Pet_image: has \n    Inventory ||--|{ Pet_clothing: has \n    Pet ||--||Inventory: has\n    Inventory ||--|{ Food: has \n    Inventory ||--|{ Background: has \n    %% Shop ||--|{ Pet: has\n    %% Shop ||--|{ Pet_clothing: has\n    Fitness_data||--||fitness_plan: has \n    Fitness_data||--|{Feedback_data:has\n    Achievement_List||--|{ Completed_achievements: has\n    Achievement_List||--|{ Uncompleted_achievements: has\n    UserProfile {\n        string user_id\n        string full_name\n        date birth_date\n    }\n    Fitness_data{\n        int fitness_data_id\n        int height\n        int weight \n     \n    }\n    Feedback_data{\n        int feedback_data_id\n        int form_value\n        int speed_value\n        date date_recorded\n        int sets\n        int reps\n        int dumbbell_weight\n    }\n    fitness_plan{\n        int fitness_plan_id\n        int weight_goal\n        int num_days_to_workout\n    }\n    User {\n        string user_id\n        int currency\n        date latest_login\n        %% string apple_id\n        %% enum account_type\n        %% date registration_date\n    }\n    Apple{\n        int apple_id\n        string email\n        string password\n    }\n    %% Account_type{\n    %%     int account_type_id\n    %%     string account_type \n    %% }\n    Pet{\n        int pet_id\n        int level\n        int health\n    }\n    Pet_image{\n        int pet_image_id\n        string pet_image_url\n    }\n    Inventory{\n        int inventory_id\n    }\n    Food{\n        int food_id\n        string food_name\n        string food_image_url\n    }\n    Background{\n        int background_id\n        string background_name\n        string background_image_url\n    }\n    Pet_clothing{\n        int pet_clothing_id\n        int price \n        string pet_clothing_image\n    }\n    Achievement_List{\n        int achievement_list_id\n\n    }\n    Completed_achievements{\n        int achievement_id\n        string achievement_name\n        int reward\n    }\n    Uncompleted_achievements{\n        int achievement_id\n        string achievement_name\n        int reward\n    }"}),"\n",(0,a.jsx)(n.p,{children:"As this is a NoSQL approach, there are some relations to where there are a one-to-many. This can be seen through something such as inventory. A user has one pet, which has one inventory, but an inventory can store multiple Food."}),"\n",(0,a.jsx)(n.mermaid,{value:"erDiagram\n Pet{\n        int pet_id\n        int level\n        int health\n    }\n Inventory{\n        int inventory_id\n    }\n    Food{\n        int food_id\n        string food_name\n        string food_image_url\n    }\n  Pet ||--||Inventory: has\n Inventory ||--|{ Food: has "}),"\n",(0,a.jsx)(n.h2,{id:"firebase-database-design-shop",children:"Firebase Database Design, Shop"}),"\n",(0,a.jsxs)(n.p,{children:["This is a small section of the database. It is representative of the shop part of the application. The user does not manipulate this relevant data. It is used for the application to retrieve assets needed for the shop and to make loading assets with relevant values easier for development. The shop contains multiple ",(0,a.jsx)(n.em,{children:"Assets"})," and assets can contain 0 or more KeywordTags to help for easier searching functionality in the application."]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Shop\n---\n\nerDiagram\n    \n \n    Asset {\n        asset_id INT \n        name STRING\n        category STRING\n        price INT\n        image_URL STRING\n        date DATE\n    }\n    KeywordTag{\n        keyword_tag_id INT\n        keyword STRING\n    }\n    Asset ||--o{ KeywordTag: has"}),"\n",(0,a.jsx)(n.h2,{id:"coredata-database-design",children:"CoreData Database Design"}),"\n",(0,a.jsx)(n.p,{children:"The purpose of the CoreData database design is to be lightweight and to contain the information relevant to the machine learning that will take place to help provide relevant feedback for the user's workout. There are multiple sensor systems that will get measurement data."}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: CoreData Machine Learning \n---\n\nerDiagram\n    SensorSystem{\n        sensor_ID INT\n    }\n    Measurement {\n        measurement_id INT\n        user_id INT\n        speed FLOAT\n        velocity FLOAT\n        angle FLOAT\n        dateTime DATETIME\n    }\n    Exercise {\n        exercise_id INT\n        name VARCHAR\n        description VARCHAR\n    }\n    Form {\n        form_id INT\n        exercise_id INT\n        technique VARCHAR\n    }\n    \n    SensorSystem ||--o{ Measurement: has\n    Measurement }|--|| Exercise : has\n    Exercise ||--|| Form : has\n"})]})}function l(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>r});var a=t(67294);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);